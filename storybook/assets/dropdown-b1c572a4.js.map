{"version":3,"file":"dropdown-b1c572a4.js","sources":["../../src/hooks/use-scrollable-menu.ts","../../src/components/dropdown/private/update-menu-element-layout.ts","../../src/components/dropdown/dropdown.tsx"],"sourcesContent":["import { JSX, RefObject } from 'preact'\nimport { useCallback } from 'preact/hooks'\n\nimport { Event } from '../types/event-handler.js'\nimport { getCurrentFromRef } from '../utilities/get-current-from-ref.js'\n\nexport function useScrollableMenu(options: {\n  itemIdDataAttributeName: string\n  menuElementRef: RefObject<HTMLDivElement>\n  selectedId: null | string\n  setSelectedId: (selectedId: string) => void\n}): {\n  handleScrollableMenuKeyDown: (event: Event.onKeyDown<HTMLElement>) => void\n  handleScrollableMenuItemMouseMove: (\n    event: Event.onMouseMove<HTMLElement>\n  ) => void\n} {\n  const { itemIdDataAttributeName, menuElementRef, selectedId, setSelectedId } =\n    options\n\n  const getItemElements = useCallback(\n    function (): Array<HTMLElement> {\n      return Array.from(\n        getCurrentFromRef(menuElementRef).querySelectorAll<HTMLElement>(\n          `[${itemIdDataAttributeName}]`\n        )\n      ).filter(function (element: HTMLElement): boolean {\n        return element.hasAttribute('disabled') === false\n      })\n    },\n    [itemIdDataAttributeName, menuElementRef]\n  )\n\n  const findIndexByItemId = useCallback(\n    function (id: null | string): number {\n      if (id === null) {\n        return -1\n      }\n      const index = getItemElements().findIndex(function (\n        element: HTMLElement\n      ): boolean {\n        return (element.getAttribute(itemIdDataAttributeName) as string) === id\n      })\n      if (index === -1) {\n        throw new Error('`index` is `-1`') // `id` is valid\n      }\n      return index\n    },\n    [getItemElements, itemIdDataAttributeName]\n  )\n\n  const updateScrollPosition = useCallback(\n    function (id: string): void {\n      const itemElements = getItemElements()\n      const index = findIndexByItemId(id)\n      const selectedElement = itemElements[index]\n      const selectedElementOffsetTop =\n        selectedElement.getBoundingClientRect().top\n      const menuElement = getCurrentFromRef(menuElementRef)\n      const menuElementOffsetTop = menuElement.getBoundingClientRect().top\n      if (selectedElementOffsetTop < menuElementOffsetTop) {\n        selectedElement.scrollIntoView()\n        return\n      }\n      const offsetBottom =\n        selectedElementOffsetTop + selectedElement.offsetHeight\n      if (offsetBottom > menuElementOffsetTop + menuElement.offsetHeight) {\n        selectedElement.scrollIntoView()\n      }\n    },\n    [findIndexByItemId, getItemElements, menuElementRef]\n  )\n\n  const handleScrollableMenuKeyDown = useCallback(\n    function (event: JSX.TargetedKeyboardEvent<HTMLElement>): void {\n      const key = event.key\n      if (key === 'ArrowDown' || key === 'ArrowUp') {\n        const itemElements = getItemElements()\n        const index = findIndexByItemId(selectedId)\n        let newIndex\n        if (key === 'ArrowDown') {\n          newIndex =\n            index === -1 || index === itemElements.length - 1 ? 0 : index + 1\n        } else {\n          newIndex =\n            index === -1 || index === 0 ? itemElements.length - 1 : index - 1\n        }\n        const selectedElement = itemElements[newIndex]\n        const newSelectedId = selectedElement.getAttribute(\n          itemIdDataAttributeName\n        ) as string\n        setSelectedId(newSelectedId)\n        updateScrollPosition(newSelectedId)\n      }\n    },\n    [\n      getItemElements,\n      findIndexByItemId,\n      itemIdDataAttributeName,\n      setSelectedId,\n      selectedId,\n      updateScrollPosition\n    ]\n  )\n\n  const handleScrollableMenuItemMouseMove = useCallback(\n    function (event: JSX.TargetedMouseEvent<HTMLElement>): void {\n      const id = event.currentTarget.getAttribute(\n        itemIdDataAttributeName\n      ) as string\n      if (id !== selectedId) {\n        setSelectedId(id)\n      }\n    },\n    [itemIdDataAttributeName, selectedId, setSelectedId]\n  )\n\n  return {\n    handleScrollableMenuItemMouseMove,\n    handleScrollableMenuKeyDown\n  }\n}\n","import {\n  INVALID_ID,\n  ITEM_ID_DATA_ATTRIBUTE_NAME,\n  VIEWPORT_MARGIN\n} from '../../../utilities/private/constants.js'\nimport { Id } from './types.js'\n\nexport function updateMenuElementLayout(\n  rootElement: HTMLDivElement,\n  menuElement: HTMLDivElement,\n  selectedId: Id\n) {\n  const rootElementBoundingClientRect = rootElement.getBoundingClientRect()\n  const rootWidth = rootElement.offsetWidth\n  const rootHeight = rootElement.offsetHeight\n  const rootLeft = rootElementBoundingClientRect.left\n  const rootTop = rootElementBoundingClientRect.top\n\n  menuElement.style.minWidth = `${rootWidth}px`\n\n  const menuElementMaxWidth = window.innerWidth - 2 * VIEWPORT_MARGIN\n  menuElement.style.maxWidth = `${menuElementMaxWidth}px`\n\n  const menuElementMaxHeight = window.innerHeight - 2 * VIEWPORT_MARGIN\n  menuElement.style.maxHeight = `${menuElementMaxHeight}px`\n\n  const menuWidth = menuElement.offsetWidth\n  const menuHeight = menuElement.offsetHeight\n  const menuScrollHeight = menuElement.scrollHeight\n  const menuPaddingTop = parseInt(\n    window.getComputedStyle(menuElement).paddingTop,\n    10\n  )\n  const labelElement = getSelectedLabelElement(menuElement, selectedId)\n\n  const left = computeLeft({\n    menuWidth,\n    rootLeft\n  })\n  menuElement.style.left = `${left}px`\n\n  const top = computeTop({\n    menuHeight,\n    rootTop,\n    selectedTop: labelElement.offsetTop\n  })\n  menuElement.style.top = `${top}px`\n\n  const isScrollable = menuScrollHeight > menuHeight\n  if (isScrollable === false) {\n    return\n  }\n  menuElement.scrollTop = computeScrollTop({\n    menuHeight,\n    menuPaddingTop,\n    menuScrollHeight,\n    rootHeight,\n    rootTop,\n    selectedTop: labelElement.offsetTop\n  })\n}\n\nfunction getSelectedLabelElement(\n  menuElement: HTMLDivElement,\n  selectedId: Id\n): HTMLLabelElement {\n  const inputElement = menuElement.querySelector<HTMLInputElement>(\n    selectedId === INVALID_ID\n      ? `[${ITEM_ID_DATA_ATTRIBUTE_NAME}]`\n      : `[${ITEM_ID_DATA_ATTRIBUTE_NAME}='${selectedId}']`\n  )\n  if (inputElement === null) {\n    throw new Error('`inputElement` is `null`')\n  }\n  const labelElement = inputElement.parentElement\n  if (labelElement === null) {\n    throw new Error('`labelElement` is `null`')\n  }\n  return labelElement as HTMLLabelElement\n}\n\nfunction computeLeft(options: { menuWidth: number; rootLeft: number }): number {\n  const { menuWidth, rootLeft } = options\n  if (rootLeft <= VIEWPORT_MARGIN) {\n    return VIEWPORT_MARGIN\n  }\n  const viewportWidth = window.innerWidth\n  if (rootLeft + menuWidth > viewportWidth - VIEWPORT_MARGIN) {\n    return viewportWidth - VIEWPORT_MARGIN - menuWidth\n  }\n  return rootLeft\n}\n\nfunction computeTop(options: {\n  menuHeight: number\n  rootTop: number\n  selectedTop: number\n}): number {\n  const { menuHeight, rootTop, selectedTop } = options\n  const viewportHeight = window.innerHeight\n  if (\n    rootTop <= VIEWPORT_MARGIN ||\n    menuHeight === viewportHeight - 2 * VIEWPORT_MARGIN\n  ) {\n    return VIEWPORT_MARGIN\n  }\n  // Position the selected element at `rootTop`\n  const top = rootTop - selectedTop\n  const minimumTop = VIEWPORT_MARGIN\n  const maximumTop = viewportHeight - VIEWPORT_MARGIN - menuHeight\n  return restrictToRange(top, minimumTop, maximumTop)\n}\n\nfunction computeScrollTop(options: {\n  menuHeight: number\n  menuPaddingTop: number\n  menuScrollHeight: number\n  rootHeight: number\n  rootTop: number\n  selectedTop: number\n}): number {\n  const {\n    menuHeight,\n    menuPaddingTop,\n    menuScrollHeight,\n    rootHeight,\n    rootTop,\n    selectedTop\n  } = options\n  const restrictedRootTop = restrictToRange(\n    rootTop,\n    VIEWPORT_MARGIN,\n    window.innerHeight - VIEWPORT_MARGIN - rootHeight + menuPaddingTop / 2\n  )\n  const scrollTop = selectedTop - (restrictedRootTop - VIEWPORT_MARGIN)\n  const minimumScrollTop = 0\n  const maximumScrollTop = menuScrollHeight - menuHeight\n  return restrictToRange(scrollTop, minimumScrollTop, maximumScrollTop)\n}\n\nfunction restrictToRange(\n  number: number,\n  minimum: number,\n  maximum: number\n): number {\n  return Math.min(Math.max(number, minimum), maximum)\n}\n","import { ComponentChildren, h, RefObject } from 'preact'\nimport { createPortal } from 'preact/compat'\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks'\n\nimport menuStyles from '../../css/menu.module.css'\nimport { useMouseDownOutside } from '../../hooks/use-mouse-down-outside.js'\nimport { useScrollableMenu } from '../../hooks/use-scrollable-menu.js'\nimport { IconControlChevronDown8 } from '../../icons/icon-8/icon-control-chevron-down-8.js'\nimport { IconMenuCheckmarkChecked16 } from '../../icons/icon-16/icon-menu-checkmark-checked-16.js'\nimport { Event, EventHandler } from '../../types/event-handler.js'\nimport { createClassName } from '../../utilities/create-class-name.js'\nimport { createComponent } from '../../utilities/create-component.js'\nimport { getCurrentFromRef } from '../../utilities/get-current-from-ref.js'\nimport { noop } from '../../utilities/no-op.js'\nimport {\n  INVALID_ID,\n  ITEM_ID_DATA_ATTRIBUTE_NAME\n} from '../../utilities/private/constants.js'\nimport dropdownStyles from './dropdown.module.css'\nimport { Id } from './private/types.js'\nimport { updateMenuElementLayout } from './private/update-menu-element-layout.js'\n\nexport interface DropdownProps {\n  disabled?: boolean\n  icon?: ComponentChildren\n  onChange?: EventHandler.onChange<HTMLInputElement>\n  onKeyDown?: EventHandler.onKeyDown<HTMLDivElement>\n  onMouseDown?: EventHandler.onMouseDown<HTMLDivElement>\n  onValueChange?: EventHandler.onValueChange<string>\n  options: Array<DropdownOption>\n  placeholder?: string\n  propagateEscapeKeyDown?: boolean\n  value: null | string\n  variant?: DropdownVariant\n}\nexport type DropdownOption =\n  | DropdownOptionHeader\n  | DropdownOptionSeparator\n  | DropdownOptionValue\nexport type DropdownOptionHeader = {\n  header: string\n}\nexport type DropdownOptionSeparator = '-'\nexport type DropdownOptionValue = {\n  disabled?: boolean\n  text?: string\n  value: string\n}\nexport type DropdownVariant = 'border' | 'underline'\n\nexport const Dropdown = createComponent<HTMLDivElement, DropdownProps>(\n  function (\n    {\n      disabled = false,\n      icon,\n      onChange = noop,\n      onKeyDown = noop,\n      onMouseDown = noop,\n      onValueChange = noop,\n      options,\n      placeholder,\n      propagateEscapeKeyDown = true,\n      value,\n      variant,\n      ...rest\n    },\n    ref\n  ) {\n    if (typeof icon === 'string' && icon.length !== 1) {\n      throw new Error(`String \\`icon\\` must be a single character: \"${icon}\"`)\n    }\n\n    const rootElementRef: RefObject<HTMLDivElement> = useRef(null)\n    const menuElementRef: RefObject<HTMLDivElement> = useRef(null)\n\n    const [isMenuVisible, setIsMenuVisible] = useState(false)\n\n    const index = findOptionIndexByValue(options, value)\n    if (value !== null && index === -1) {\n      throw new Error(`Invalid \\`value\\`: ${value}`)\n    }\n    const [selectedId, setSelectedId] = useState<Id>(\n      index === -1 ? INVALID_ID : `${index}`\n    )\n    const children =\n      typeof options[index] === 'undefined'\n        ? ''\n        : getDropdownOptionValue(options[index])\n\n    // Uncomment to debug\n    // console.table([{ isMenuVisible, selectedId }])\n\n    const { handleScrollableMenuKeyDown, handleScrollableMenuItemMouseMove } =\n      useScrollableMenu({\n        itemIdDataAttributeName: ITEM_ID_DATA_ATTRIBUTE_NAME,\n        menuElementRef,\n        selectedId,\n        setSelectedId\n      })\n\n    const triggerRootBlur = useCallback(function () {\n      getCurrentFromRef(rootElementRef).blur()\n    }, [])\n\n    const triggerRootFocus = useCallback(function () {\n      getCurrentFromRef(rootElementRef).focus()\n    }, [])\n\n    const triggerMenuUpdateLayout = useCallback(function (selectedId: Id) {\n      const rootElement = getCurrentFromRef(rootElementRef)\n      const menuElement = getCurrentFromRef(menuElementRef)\n      updateMenuElementLayout(rootElement, menuElement, selectedId)\n    }, [])\n\n    const triggerMenuHide = useCallback(function () {\n      setIsMenuVisible(false)\n      setSelectedId(INVALID_ID)\n    }, [])\n\n    const triggerMenuShow = useCallback(\n      function () {\n        if (isMenuVisible === true) {\n          return\n        }\n        // Show the menu and update the `selectedId` on focus\n        setIsMenuVisible(true)\n        if (value === null) {\n          triggerMenuUpdateLayout(selectedId)\n          return\n        }\n        const index = findOptionIndexByValue(options, value)\n        if (index === -1) {\n          throw new Error(`Invalid \\`value\\`: ${value}`)\n        }\n        const newSelectedId = `${index}`\n        setSelectedId(newSelectedId)\n        triggerMenuUpdateLayout(newSelectedId)\n      },\n      [isMenuVisible, options, selectedId, triggerMenuUpdateLayout, value]\n    )\n\n    const handleRootKeyDown = useCallback(\n      function (event: Event.onKeyDown<HTMLDivElement>) {\n        onKeyDown(event)\n        const key = event.key\n        if (key === 'ArrowUp' || key === 'ArrowDown') {\n          event.preventDefault()\n          if (isMenuVisible === false) {\n            triggerMenuShow()\n            return\n          }\n          handleScrollableMenuKeyDown(event)\n          return\n        }\n        if (key === 'Escape') {\n          event.preventDefault()\n          if (propagateEscapeKeyDown === false) {\n            event.stopPropagation()\n          }\n          if (isMenuVisible === true) {\n            triggerMenuHide()\n            return\n          }\n          triggerRootBlur()\n          return\n        }\n        if (key === 'Enter') {\n          event.preventDefault()\n          if (isMenuVisible === false) {\n            triggerMenuShow()\n            return\n          }\n          if (selectedId !== INVALID_ID) {\n            const selectedElement = getCurrentFromRef(\n              menuElementRef\n            ).querySelector<HTMLInputElement>(\n              `[${ITEM_ID_DATA_ATTRIBUTE_NAME}='${selectedId}']`\n            )\n            if (selectedElement === null) {\n              throw new Error('`selectedElement` is `null`')\n            }\n            selectedElement.checked = true\n            const changeEvent = new window.Event('change', {\n              bubbles: true,\n              cancelable: true\n            })\n            selectedElement.dispatchEvent(changeEvent)\n          }\n          triggerMenuHide()\n          return\n        }\n        if (key === 'Tab') {\n          triggerMenuHide()\n          return\n        }\n      },\n      [\n        handleScrollableMenuKeyDown,\n        isMenuVisible,\n        onKeyDown,\n        propagateEscapeKeyDown,\n        selectedId,\n        triggerMenuHide,\n        triggerMenuShow,\n        triggerRootBlur\n      ]\n    )\n\n    const handleRootMouseDown = useCallback(\n      function (event: Event.onMouseDown<HTMLDivElement>) {\n        // `mousedown` events from `menuElement` are stopped from propagating to `rootElement` by `handleMenuMouseDown`\n        onMouseDown(event)\n        if (isMenuVisible === false) {\n          triggerMenuShow()\n        }\n      },\n      [isMenuVisible, onMouseDown, triggerMenuShow]\n    )\n\n    const handleMenuMouseDown = useCallback(function (\n      event: Event.onMouseDown<HTMLDivElement>\n    ) {\n      // Stop the `mousedown` event from propagating to the `rootElement`\n      event.stopPropagation()\n    },\n    [])\n\n    const handleOptionChange = useCallback(\n      function (event: Event.onChange<HTMLInputElement>) {\n        onChange(event)\n        const id = event.currentTarget.getAttribute(ITEM_ID_DATA_ATTRIBUTE_NAME)\n        if (id === null) {\n          throw new Error('`id` is `null`')\n        }\n        const optionValue = options[parseInt(id, 10)] as DropdownOptionValue\n        const newValue = optionValue.value\n        onValueChange(newValue)\n        // Select `root`, then hide the menu\n        triggerRootFocus()\n        triggerMenuHide()\n      },\n      [onChange, onValueChange, options, triggerMenuHide, triggerRootFocus]\n    )\n\n    const handleSelectedOptionClick = useCallback(\n      function () {\n        triggerRootFocus()\n        triggerMenuHide()\n      },\n      [triggerMenuHide, triggerRootFocus]\n    )\n\n    const handleMouseDownOutside = useCallback(\n      function () {\n        if (isMenuVisible === false) {\n          return\n        }\n        triggerMenuHide()\n        triggerRootBlur()\n      },\n      [isMenuVisible, triggerRootBlur, triggerMenuHide]\n    )\n    useMouseDownOutside({\n      onMouseDownOutside: handleMouseDownOutside,\n      ref: rootElementRef\n    })\n\n    useEffect(\n      function () {\n        function handleWindowScroll() {\n          if (isMenuVisible === false) {\n            return\n          }\n          triggerRootFocus()\n          triggerMenuHide()\n        }\n        window.addEventListener('scroll', handleWindowScroll)\n        return function () {\n          window.removeEventListener('scroll', handleWindowScroll)\n        }\n      },\n      [isMenuVisible, triggerMenuHide, triggerRootFocus]\n    )\n\n    const refCallback = useCallback(\n      function (rootElement: null | HTMLDivElement) {\n        rootElementRef.current = rootElement\n        if (ref === null) {\n          return\n        }\n        if (typeof ref === 'function') {\n          ref(rootElement)\n          return\n        }\n        ref.current = rootElement\n      },\n      [ref, rootElementRef]\n    )\n\n    return (\n      <div\n        {...rest}\n        ref={refCallback}\n        class={createClassName([\n          dropdownStyles.dropdown,\n          variant === 'border' ? dropdownStyles.hasBorder : null,\n          typeof icon !== 'undefined' ? dropdownStyles.hasIcon : null,\n          disabled === true ? dropdownStyles.disabled : null\n        ])}\n        onKeyDown={disabled === true ? undefined : handleRootKeyDown}\n        onMouseDown={handleRootMouseDown}\n        tabIndex={0}\n      >\n        {typeof icon === 'undefined' ? null : (\n          <div class={dropdownStyles.icon}>{icon}</div>\n        )}\n        {value === null ? (\n          typeof placeholder === 'undefined' ? (\n            <div class={dropdownStyles.empty} />\n          ) : (\n            <div\n              class={createClassName([\n                dropdownStyles.value,\n                dropdownStyles.placeholder\n              ])}\n            >\n              {placeholder}\n            </div>\n          )\n        ) : (\n          <div class={dropdownStyles.value}>{children}</div>\n        )}\n        <div class={dropdownStyles.chevronIcon}>\n          <IconControlChevronDown8 />\n        </div>\n        {variant === 'underline' ? (\n          <div class={dropdownStyles.underline} />\n        ) : null}\n        <div class={dropdownStyles.border} />\n        {createPortal(\n          <div\n            ref={menuElementRef}\n            class={createClassName([\n              menuStyles.menu,\n              dropdownStyles.menu,\n              disabled === true || isMenuVisible === false\n                ? menuStyles.hidden\n                : null\n            ])}\n            onMouseDown={handleMenuMouseDown}\n          >\n            {options.map(function (option: DropdownOption, index: number) {\n              if (typeof option === 'string') {\n                return <hr key={index} class={menuStyles.optionSeparator} />\n              }\n              if ('header' in option) {\n                return (\n                  <h1 key={index} class={menuStyles.optionHeader}>\n                    {option.header}\n                  </h1>\n                )\n              }\n              return (\n                <label\n                  key={index}\n                  class={createClassName([\n                    menuStyles.optionValue,\n                    option.disabled === true\n                      ? menuStyles.optionValueDisabled\n                      : null,\n                    option.disabled !== true && `${index}` === selectedId\n                      ? menuStyles.optionValueSelected\n                      : null\n                  ])}\n                >\n                  <input\n                    checked={value === option.value}\n                    class={menuStyles.input}\n                    disabled={option.disabled === true}\n                    // If clicked on an unselected element, set the value\n                    onChange={\n                      value === option.value ? undefined : handleOptionChange\n                    }\n                    // Else hide the menu if clicked on an already-selected element\n                    onClick={\n                      value === option.value\n                        ? handleSelectedOptionClick\n                        : undefined\n                    }\n                    onMouseMove={handleScrollableMenuItemMouseMove}\n                    tabIndex={-1}\n                    type=\"radio\"\n                    value={`${option.value}`}\n                    {...{ [ITEM_ID_DATA_ATTRIBUTE_NAME]: `${index}` }}\n                  />\n                  {option.value === value ? (\n                    <div class={menuStyles.checkIcon}>\n                      <IconMenuCheckmarkChecked16 />\n                    </div>\n                  ) : null}\n                  {typeof option.text === 'undefined'\n                    ? option.value\n                    : option.text}\n                </label>\n              )\n            })}\n          </div>,\n          document.body\n        )}\n      </div>\n    )\n  }\n)\n\nfunction getDropdownOptionValue(option: DropdownOption): ComponentChildren {\n  if (typeof option !== 'string') {\n    if ('text' in option) {\n      return option.text\n    }\n    if ('value' in option) {\n      return option.value\n    }\n  }\n  throw new Error('Invariant violation')\n}\n\n// Returns the index of the option in `options` with the given `value`, else `-1`\nfunction findOptionIndexByValue(\n  options: Array<DropdownOption>,\n  value: null | string\n): number {\n  if (value === null) {\n    return -1\n  }\n  let index = 0\n  for (const option of options) {\n    if (\n      typeof option !== 'string' &&\n      'value' in option &&\n      option.value === value\n    ) {\n      return index\n    }\n    index += 1\n  }\n  return -1\n}\n"],"names":["useScrollableMenu","options","itemIdDataAttributeName","menuElementRef","selectedId","setSelectedId","getItemElements","useCallback","Array","from","getCurrentFromRef","querySelectorAll","filter","element","hasAttribute","findIndexByItemId","id","index","findIndex","getAttribute","Error","updateScrollPosition","itemElements","selectedElement","selectedElementOffsetTop","getBoundingClientRect","top","menuElement","menuElementOffsetTop","scrollIntoView","offsetHeight","handleScrollableMenuKeyDown","event","key","newIndex","length","newSelectedId","handleScrollableMenuItemMouseMove","currentTarget","updateMenuElementLayout","rootElement","rootElementBoundingClientRect","rootWidth","offsetWidth","rootHeight","rootLeft","left","rootTop","style","minWidth","menuElementMaxWidth","window","innerWidth","VIEWPORT_MARGIN","maxWidth","menuElementMaxHeight","innerHeight","maxHeight","menuWidth","menuHeight","menuScrollHeight","scrollHeight","menuPaddingTop","parseInt","getComputedStyle","paddingTop","labelElement","getSelectedLabelElement","computeLeft","computeTop","selectedTop","offsetTop","scrollTop","computeScrollTop","inputElement","querySelector","INVALID_ID","ITEM_ID_DATA_ATTRIBUTE_NAME","parentElement","viewportWidth","viewportHeight","minimumTop","maximumTop","restrictToRange","restrictedRootTop","minimumScrollTop","maximumScrollTop","number","minimum","maximum","Math","min","max","Dropdown","createComponent","disabled","icon","onChange","noop","onKeyDown","onMouseDown","onValueChange","placeholder","propagateEscapeKeyDown","value","variant","rest","ref","rootElementRef","useRef","isMenuVisible","setIsMenuVisible","useState","findOptionIndexByValue","children","getDropdownOptionValue","triggerRootBlur","blur","triggerRootFocus","focus","triggerMenuUpdateLayout","triggerMenuHide","triggerMenuShow","handleRootKeyDown","preventDefault","stopPropagation","checked","changeEvent","Event","bubbles","cancelable","dispatchEvent","handleRootMouseDown","handleMenuMouseDown","handleOptionChange","newValue","handleSelectedOptionClick","handleMouseDownOutside","useMouseDownOutside","onMouseDownOutside","useEffect","handleWindowScroll","addEventListener","removeEventListener","refCallback","current","_jsxs","class","createClassName","dropdownStyles","dropdown","hasBorder","hasIcon","undefined","tabIndex","_jsx","empty","chevronIcon","IconControlChevronDown8","underline","border","createPortal","menuStyles","menu","hidden","map","option","optionSeparator","optionHeader","header","optionValue","optionValueDisabled","optionValueSelected","input","onClick","onMouseMove","type","checkIcon","IconMenuCheckmarkChecked16","text","document","body"],"mappings":"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"}