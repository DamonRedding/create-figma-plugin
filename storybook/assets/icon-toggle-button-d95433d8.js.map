{"version":3,"file":"icon-toggle-button-d95433d8.js","sources":["../../src/components/icon-toggle-button/icon-toggle-button.tsx"],"sourcesContent":["import { ComponentChildren, h, JSX } from 'preact'\nimport { useCallback } from 'preact/hooks'\n\nimport { OnValueChange, Props } from '../../types/types.js'\nimport { createClassName } from '../../utilities/create-class-name.js'\nimport styles from './icon-toggle-button.module.css'\n\nexport type IconToggleButtonProps<Name extends string> = {\n  children: ComponentChildren\n  disabled?: boolean\n  name?: Name\n  onChange?: OmitThisParameter<JSX.GenericEventHandler<HTMLInputElement>>\n  onValueChange?: OnValueChange<boolean, Name>\n  propagateEscapeKeyDown?: boolean\n  value: boolean\n}\n\nexport function IconToggleButton<Name extends string>({\n  children,\n  disabled = false,\n  name,\n  onChange = function () {},\n  onValueChange = function () {},\n  propagateEscapeKeyDown = true,\n  value,\n  ...rest\n}: Props<HTMLInputElement, IconToggleButtonProps<Name>>): JSX.Element {\n  const handleChange = useCallback(\n    function (event: JSX.TargetedEvent<HTMLInputElement>): void {\n      onValueChange(!value, name)\n      onChange(event)\n    },\n    [name, onChange, onValueChange, value]\n  )\n\n  const handleKeyDown = useCallback(\n    function (event: JSX.TargetedKeyboardEvent<HTMLInputElement>): void {\n      if (event.key !== 'Escape') {\n        return\n      }\n      if (propagateEscapeKeyDown === false) {\n        event.stopPropagation()\n      }\n      event.currentTarget.blur()\n    },\n    [propagateEscapeKeyDown]\n  )\n\n  return (\n    <label\n      class={createClassName([\n        styles.iconToggleButton,\n        disabled === true ? styles.disabled : null\n      ])}\n    >\n      <input\n        {...rest}\n        checked={value === true}\n        class={styles.input}\n        disabled={disabled === true}\n        name={name}\n        onChange={handleChange}\n        onKeyDown={disabled === true ? undefined : handleKeyDown}\n        tabIndex={disabled === true ? -1 : 0}\n        type=\"checkbox\"\n      />\n      <div class={styles.box}>\n        <div class={styles.icon}>{children}</div>\n      </div>\n    </label>\n  )\n}\n"],"names":["IconToggleButton","children","disabled","name","onChange","onValueChange","propagateEscapeKeyDown","value","rest","handleChange","useCallback","event","handleKeyDown","key","stopPropagation","currentTarget","blur","_jsxs","class","createClassName","styles","iconToggleButton","_jsx","checked","input","onKeyDown","undefined","tabIndex","type","box","icon"],"mappings":"gUAiBO,SAASA,EAAsC,CACpDC,SAAAA,EACAC,SAAAA,EAAW,GACXC,KAAAA,EACAC,SAAAA,EAAW,UAAY,CAAC,EACxBC,cAAAA,EAAgB,UAAY,CAAC,EAC7BC,uBAAAA,EAAyB,GACzBC,MAAAA,EACA,GAAGC,CACiD,EAAgB,CAC9DC,MAAAA,EAAeC,EACnB,SAAUC,EAAkD,CAC5CN,EAAA,CAACE,EAAOJ,CAAI,EAC1BC,EAASO,CAAK,GAEhB,CAACR,EAAMC,EAAUC,EAAeE,CAAK,CACvC,EAEMK,EAAgBF,EACpB,SAAUC,EAA0D,CAC9DA,EAAME,MAAQ,WAGdP,IAA2B,IAC7BK,EAAMG,gBAAgB,EAExBH,EAAMI,cAAcC,OAAK,EAE3B,CAACV,CAAsB,CACzB,EAEA,OACEW,EAAA,QAAA,CACEC,MAAOC,EAAgB,CACrBC,EAAOC,iBACPnB,IAAa,GAAOkB,EAAOlB,SAAW,IAAI,CAC3C,EAAED,UAEHqB,EAAA,QAAA,CAAA,GACMd,EACJe,QAAShB,IAAU,GACnBW,MAAOE,EAAOI,MACdtB,SAAUA,IAAa,GACvBC,KAAAA,EACAC,SAAUK,EACVgB,UAAWvB,IAAa,GAAOwB,OAAYd,EAC3Ce,SAAUzB,IAAa,GAAO,GAAK,EACnC0B,KAAK,UAAA,CACN,EACDN,EAAA,MAAA,CAAKJ,MAAOE,EAAOS,IAAI5B,SACrBqB,EAAA,MAAA,CAAKJ,MAAOE,EAAOU,KAAK7B,SAAAA,CAAAA,CAAgB,CAAA,CACrC,CAAC,CAAA,CACD,CAEX"}