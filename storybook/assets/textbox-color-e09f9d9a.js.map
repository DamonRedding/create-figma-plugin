{"version":3,"file":"textbox-color-e09f9d9a.js","sources":["../../../../node_modules/hex-rgb/index.js","../../../utilities/lib/color/convert-hex-color-to-rgb-color.js","../../../utilities/lib/color/private/named-colors.js","../../../utilities/lib/color/convert-named-color-to-hex-color.js","../../../../node_modules/rgb-hex/index.js","../../../utilities/lib/color/convert-rgb-color-to-hex-color.js","../../../utilities/lib/color/is-valid-hex-color.js","../../src/components/textbox/textbox-color/private/create-rgba-color.ts","../../src/components/textbox/textbox-color/private/normalize-hex-color.ts","../../src/components/textbox/textbox-color/private/update-hex-color.ts","../../src/components/textbox/textbox-color/textbox-color.tsx"],"sourcesContent":["const hexCharacters = 'a-f\\\\d';\nconst match3or4Hex = `#?[${hexCharacters}]{3}[${hexCharacters}]?`;\nconst match6or8Hex = `#?[${hexCharacters}]{6}([${hexCharacters}]{2})?`;\nconst nonHexChars = new RegExp(`[^#${hexCharacters}]`, 'gi');\nconst validHexSize = new RegExp(`^${match3or4Hex}$|^${match6or8Hex}$`, 'i');\n\nexport default function hexRgb(hex, options = {}) {\n\tif (typeof hex !== 'string' || nonHexChars.test(hex) || !validHexSize.test(hex)) {\n\t\tthrow new TypeError('Expected a valid hex string');\n\t}\n\n\thex = hex.replace(/^#/, '');\n\tlet alphaFromHex = 1;\n\n\tif (hex.length === 8) {\n\t\talphaFromHex = Number.parseInt(hex.slice(6, 8), 16) / 255;\n\t\thex = hex.slice(0, 6);\n\t}\n\n\tif (hex.length === 4) {\n\t\talphaFromHex = Number.parseInt(hex.slice(3, 4).repeat(2), 16) / 255;\n\t\thex = hex.slice(0, 3);\n\t}\n\n\tif (hex.length === 3) {\n\t\thex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n\t}\n\n\tconst number = Number.parseInt(hex, 16);\n\tconst red = number >> 16;\n\tconst green = (number >> 8) & 255;\n\tconst blue = number & 255;\n\tconst alpha = typeof options.alpha === 'number' ? options.alpha : alphaFromHex;\n\n\tif (options.format === 'array') {\n\t\treturn [red, green, blue, alpha];\n\t}\n\n\tif (options.format === 'css') {\n\t\tconst alphaString = alpha === 1 ? '' : ` / ${Number((alpha * 100).toFixed(2))}%`;\n\t\treturn `rgb(${red} ${green} ${blue}${alphaString})`;\n\t}\n\n\treturn {red, green, blue, alpha};\n}\n","import hexRgb from 'hex-rgb';\nexport function convertHexColorToRgbColor(hexColor) {\n    if (hexColor.length !== 3 && hexColor.length !== 6) {\n        return null;\n    }\n    try {\n        const { red, green, blue } = hexRgb(hexColor);\n        return {\n            b: blue / 255,\n            g: green / 255,\n            r: red / 255\n        };\n    }\n    catch {\n        return null;\n    }\n}\n//# sourceMappingURL=convert-hex-color-to-rgb-color.js.map","export const NAMED_COLORS = {\n    aliceblue: 'F0F8FF',\n    antiquewhite: 'FAEBD7',\n    aqua: '00FFFF',\n    aquamarine: '7FFFD4',\n    azure: 'F0FFFF',\n    beige: 'F5F5DC',\n    bisque: 'FFE4C4',\n    black: '000000',\n    blanchedalmond: 'FFEBCD',\n    blue: '0000FF',\n    blueviolet: '8A2BE2',\n    brown: 'A52A2A',\n    burlywood: 'DEB887',\n    cadetblue: '5F9EA0',\n    chartreuse: '7FFF00',\n    chocolate: 'D2691E',\n    coral: 'FF7F50',\n    cornflowerblue: '6495ED',\n    cornsilk: 'FFF8DC',\n    crimson: 'DC143C',\n    cyan: '00FFFF',\n    darkblue: '00008B',\n    darkcyan: '008B8B',\n    darkgoldenrod: 'B8860B',\n    darkgray: 'A9A9A9',\n    darkgreen: '006400',\n    darkgrey: 'A9A9A9',\n    darkkhaki: 'BDB76B',\n    darkmagenta: '8B008B',\n    darkolivegreen: '556B2F',\n    darkorange: 'FF8C00',\n    darkorchid: '9932CC',\n    darkred: '8B0000',\n    darksalmon: 'E9967A',\n    darkseagreen: '8FBC8F',\n    darkslateblue: '483D8B',\n    darkslategray: '2F4F4F',\n    darkslategrey: '2F4F4F',\n    darkturquoise: '00CED1',\n    darkviolet: '9400D3',\n    deeppink: 'FF1493',\n    deepskyblue: '00BFFF',\n    dimgray: '696969',\n    dimgrey: '696969',\n    dodgerblue: '1E90FF',\n    firebrick: 'B22222',\n    floralwhite: 'FFFAF0',\n    forestgreen: '228B22',\n    fuchsia: 'FF00FF',\n    gainsboro: 'DCDCDC',\n    ghostwhite: 'F8F8FF',\n    gold: 'FFD700',\n    goldenrod: 'DAA520',\n    gray: '808080',\n    green: '008000',\n    greenyellow: 'ADFF2F',\n    grey: '808080',\n    honeydew: 'F0FFF0',\n    hotpink: 'FF69B4',\n    indianred: 'CD5C5C',\n    indigo: '4B0082',\n    ivory: 'FFFFF0',\n    khaki: 'F0E68C',\n    lavender: 'E6E6FA',\n    lavenderblush: 'FFF0F5',\n    lawngreen: '7CFC00',\n    lemonchiffon: 'FFFACD',\n    lightblue: 'ADD8E6',\n    lightcoral: 'F08080',\n    lightcyan: 'E0FFFF',\n    lightgoldenrodyellow: 'FAFAD2',\n    lightgray: 'D3D3D3',\n    lightgreen: '90EE90',\n    lightgrey: 'D3D3D3',\n    lightpink: 'FFB6C1',\n    lightsalmon: 'FFA07A',\n    lightseagreen: '20B2AA',\n    lightskyblue: '87CEFA',\n    lightslategray: '778899',\n    lightslategrey: '778899',\n    lightsteelblue: 'B0C4DE',\n    lightyellow: 'FFFFE0',\n    lime: '00FF00',\n    limegreen: '32CD32',\n    linen: 'FAF0E6',\n    magenta: 'FF00FF',\n    maroon: '800000',\n    mediumaquamarine: '66CDAA',\n    mediumblue: '0000CD',\n    mediumorchid: 'BA55D3',\n    mediumpurple: '9370DB',\n    mediumseagreen: '3CB371',\n    mediumslateblue: '7B68EE',\n    mediumspringgreen: '00FA9A',\n    mediumturquoise: '48D1CC',\n    mediumvioletred: 'C71585',\n    midnightblue: '191970',\n    mintcream: 'F5FFFA',\n    mistyrose: 'FFE4E1',\n    moccasin: 'FFE4B5',\n    navajowhite: 'FFDEAD',\n    navy: '000080',\n    oldlace: 'FDF5E6',\n    olive: '808000',\n    olivedrab: '6B8E23',\n    orange: 'FFA500',\n    orangered: 'FF4500',\n    orchid: 'DA70D6',\n    palegoldenrod: 'EEE8AA',\n    palegreen: '98FB98',\n    paleturquoise: 'AFEEEE',\n    palevioletred: 'DB7093',\n    papayawhip: 'FFEFD5',\n    peachpuff: 'FFDAB9',\n    peru: 'CD853F',\n    pink: 'FFC0CB',\n    plum: 'DDA0DD',\n    powderblue: 'B0E0E6',\n    purple: '800080',\n    rebeccapurple: '663399',\n    red: 'FF0000',\n    rosybrown: 'BC8F8F',\n    royalblue: '4169E1',\n    saddlebrown: '8B4513',\n    salmon: 'FA8072',\n    sandybrown: 'F4A460',\n    seagreen: '2E8B57',\n    seashell: 'FFF5EE',\n    sienna: 'A0522D',\n    silver: 'C0C0C0',\n    skyblue: '87CEEB',\n    slateblue: '6A5ACD',\n    slategray: '708090',\n    slategrey: '708090',\n    snow: 'FFFAFA',\n    springgreen: '00FF7F',\n    steelblue: '4682B4',\n    tan: 'D2B48C',\n    teal: '008080',\n    thistle: 'D8BFD8',\n    tomato: 'FF6347',\n    turquoise: '40E0D0',\n    violet: 'EE82EE',\n    wheat: 'F5DEB3',\n    white: 'FFFFFF',\n    whitesmoke: 'F5F5F5',\n    yellow: 'FFFF00',\n    yellowgreen: '9ACD32'\n};\n//# sourceMappingURL=named-colors.js.map","import { NAMED_COLORS } from './private/named-colors.js';\nexport function convertNamedColorToHexColor(namedColor) {\n    const hexColor = NAMED_COLORS[namedColor.toLowerCase()];\n    if (typeof hexColor === 'undefined') {\n        return null;\n    }\n    return hexColor;\n}\n//# sourceMappingURL=convert-named-color-to-hex-color.js.map","// TODO: Remove this ignore comment.\n// eslint-disable-next-line no-mixed-operators\nconst toHex = (red, green, blue, alpha) => ((blue | green << 8 | red << 16) | 1 << 24).toString(16).slice(1) + alpha;\n\nexport default function rgbHex(red, green, blue, alpha) {\n\tlet isPercent = (red + (alpha || '')).toString().includes('%');\n\n\tif (typeof red === 'string' && !green) { // Single string parameter.\n\t\tconst parsed = parseCssRgbString(red);\n\t\tif (!parsed) {\n\t\t\tthrow new TypeError('Invalid or unsupported color format.');\n\t\t}\n\n\t\tisPercent = false;\n\t\t[red, green, blue, alpha] = parsed;\n\t} else if (alpha !== undefined) {\n\t\talpha = Number.parseFloat(alpha);\n\t}\n\n\tif (typeof red !== 'number' ||\n\t\ttypeof green !== 'number' ||\n\t\ttypeof blue !== 'number' ||\n\t\tred > 255 ||\n\t\tgreen > 255 ||\n\t\tblue > 255\n\t) {\n\t\tthrow new TypeError('Expected three numbers below 256');\n\t}\n\n\tif (typeof alpha === 'number') {\n\t\tif (!isPercent && alpha >= 0 && alpha <= 1) {\n\t\t\talpha = Math.round(255 * alpha);\n\t\t} else if (isPercent && alpha >= 0 && alpha <= 100) {\n\t\t\talpha = Math.round(255 * alpha / 100);\n\t\t} else {\n\t\t\tthrow new TypeError(`Expected alpha value (${alpha}) as a fraction or percentage`);\n\t\t}\n\n\t\talpha = (alpha | 1 << 8).toString(16).slice(1); // eslint-disable-line no-mixed-operators\n\t} else {\n\t\talpha = '';\n\t}\n\n\treturn toHex(red, green, blue, alpha);\n}\n\nconst parseCssRgbString = input => {\n\tconst parts = input.replace(/rgba?\\(([^)]+)\\)/, '$1').split(/[,\\s/]+/).filter(Boolean);\n\tif (parts.length < 3) {\n\t\treturn;\n\t}\n\n\tconst parseValue = (value, max) => {\n\t\tvalue = value.trim();\n\n\t\tif (value.endsWith('%')) {\n\t\t\treturn Math.min(Number.parseFloat(value) * max / 100, max);\n\t\t}\n\n\t\treturn Math.min(Number.parseFloat(value), max);\n\t};\n\n\tconst red = parseValue(parts[0], 255);\n\tconst green = parseValue(parts[1], 255);\n\tconst blue = parseValue(parts[2], 255);\n\tlet alpha;\n\n\tif (parts.length === 4) {\n\t\talpha = parseValue(parts[3], 1);\n\t}\n\n\treturn [red, green, blue, alpha];\n};\n","import rgbHex from 'rgb-hex';\nexport function convertRgbColorToHexColor(rgbColor) {\n    const { r, g, b } = rgbColor;\n    if (r < 0 || r > 1 || g < 0 || g > 1 || b < 0 || b > 1) {\n        return null;\n    }\n    try {\n        return rgbHex(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)).toUpperCase();\n    }\n    catch {\n        return null;\n    }\n}\n//# sourceMappingURL=convert-rgb-color-to-hex-color.js.map","import { convertHexColorToRgbColor } from './convert-hex-color-to-rgb-color.js';\nexport function isValidHexColor(hexColor) {\n    return convertHexColorToRgbColor(hexColor) !== null;\n}\n//# sourceMappingURL=is-valid-hex-color.js.map","import {\n  convertHexColorToRgbColor,\n  MIXED_STRING\n} from '@create-figma-plugin/utilities'\n\nimport { RGBA } from '../../../../types/rgba'\n\nexport function createRgbaColor(\n  hexColor: string,\n  opacity: string\n): null | RGBA {\n  if (\n    hexColor === '' ||\n    hexColor === MIXED_STRING ||\n    opacity === '' ||\n    opacity === MIXED_STRING\n  ) {\n    return null\n  }\n  const rgb = convertHexColorToRgbColor(hexColor)\n  if (rgb === null) {\n    return null\n  }\n  return {\n    ...rgb,\n    a: parseInt(opacity, 10) / 100\n  }\n}\n","import {\n  convertNamedColorToHexColor,\n  isValidHexColor\n} from '@create-figma-plugin/utilities'\n\nexport function normalizeUserInputColor(string: string): null | string {\n  const parsedNamedColor = convertNamedColorToHexColor(string)\n  if (parsedNamedColor !== null) {\n    return parsedNamedColor\n  }\n  const hexColor = createHexColor(string).toUpperCase()\n  if (isValidHexColor(hexColor) === false) {\n    return null\n  }\n  return hexColor\n}\n\nfunction createHexColor(string: string): string {\n  switch (string.length) {\n    case 0: {\n      return ''\n    }\n    case 1: {\n      return Array(6).fill(string).join('')\n    }\n    case 2: {\n      return Array(3).fill(string).join('')\n    }\n    case 3:\n    case 4:\n    case 5: {\n      return `${string[0]}${string[0]}${string[1]}${string[1]}${string[2]}${string[2]}`\n    }\n    case 6: {\n      return string\n    }\n    default: {\n      return string.slice(0, 6)\n    }\n  }\n}\n","import {\n  convertHexColorToRgbColor,\n  convertRgbColorToHexColor\n} from '@create-figma-plugin/utilities'\n\nexport function updateHexColor(hexColor: string, delta: number): string {\n  const rgbColor = convertHexColorToRgbColor(hexColor)\n  if (rgbColor === null) {\n    throw new Error('Invalid `hexColor`')\n  }\n  const { r, g, b } = rgbColor\n  const result = convertRgbColorToHexColor({\n    b: updateValue(b, delta),\n    g: updateValue(g, delta),\n    r: updateValue(r, delta)\n  })\n  if (result === null) {\n    throw new Error('Invalid `rgbColor`')\n  }\n  return result\n}\n\nfunction updateValue(value: number, delta: number): number {\n  const newValue = value * 255 + delta\n  return Math.min(Math.max(newValue, 0), 255) / 255\n}\n","import { MIXED_NUMBER, MIXED_STRING } from '@create-figma-plugin/utilities'\nimport { h, RefObject } from 'preact'\nimport { useCallback, useRef, useState } from 'preact/hooks'\n\nimport { Event, EventHandler } from '../../../types/event-handler.js'\nimport { RGBA } from '../../../types/rgba.js'\nimport { createClassName } from '../../../utilities/create-class-name.js'\nimport { createComponent } from '../../../utilities/create-component.js'\nimport { getCurrentFromRef } from '../../../utilities/get-current-from-ref.js'\nimport { noop } from '../../../utilities/no-op.js'\nimport { RawTextboxNumeric } from '../textbox-numeric/private/raw-textbox-numeric.js'\nimport { createRgbaColor } from './private/create-rgba-color.js'\nimport { normalizeUserInputColor } from './private/normalize-hex-color.js'\nimport { updateHexColor } from './private/update-hex-color.js'\nimport styles from './textbox-color.module.css'\n\nconst EMPTY_STRING = ''\n\nexport type TextboxColorProps = {\n  propagateEscapeKeyDown?: boolean\n  disabled?: boolean\n  hexColor: string\n  hexColorPlaceholder?: string\n  onHexColorInput?: EventHandler.onInput<HTMLInputElement>\n  onHexColorKeyDown?: EventHandler.onKeyDown<HTMLInputElement>\n  onHexColorValueInput?: EventHandler.onValueChange<string>\n  onOpacityInput?: EventHandler.onInput<HTMLInputElement>\n  onOpacityKeyDown?: EventHandler.onKeyDown<HTMLInputElement>\n  onOpacityNumericValueInput?: EventHandler.onValueChange<null | number>\n  onOpacityValueInput?: EventHandler.onValueChange<string>\n  onRgbaColorValueInput?: EventHandler.onValueChange<null | RGBA>\n  opacity: string\n  opacityPlaceholder?: string\n  revertOnEscapeKeyDown?: boolean\n  variant?: TextboxColorVariant\n}\nexport type TextboxColorVariant = 'border' | 'underline'\n\nexport const TextboxColor = createComponent<HTMLDivElement, TextboxColorProps>(\n  function (\n    {\n      disabled = false,\n      hexColor,\n      hexColorPlaceholder,\n      onHexColorInput = noop,\n      onHexColorKeyDown = noop,\n      onHexColorValueInput = noop,\n      onOpacityInput = noop,\n      onOpacityKeyDown = noop,\n      onOpacityNumericValueInput = noop,\n      onOpacityValueInput = noop,\n      onRgbaColorValueInput = noop,\n      opacity,\n      opacityPlaceholder,\n      propagateEscapeKeyDown = true,\n      revertOnEscapeKeyDown = false,\n      variant,\n      ...rest\n    },\n    ref\n  ) {\n    const hexColorInputElementRef: RefObject<HTMLInputElement> = useRef(null)\n    const opacityInputElementRef: RefObject<HTMLInputElement> = useRef(null)\n    const revertOnEscapeKeyDownRef: RefObject<boolean> = useRef(false) // Set to `true` when the `Escape` key is pressed; used to bail out of `handleHexColorBlur`\n\n    const [originalHexColor, setOriginalHexColor] = useState(EMPTY_STRING) // Value of the hex color textbox when it was initially focused\n\n    const setHexColorInputElementValue = useCallback(function (value: string) {\n      const inputElement = getCurrentFromRef(hexColorInputElementRef)\n      inputElement.value = value\n      const inputEvent = new window.Event('input', {\n        bubbles: true,\n        cancelable: true\n      })\n      inputElement.dispatchEvent(inputEvent)\n    }, [])\n\n    const handleHexColorSelectorFocus = useCallback(function (\n      event: Event.onFocus<HTMLInputElement>\n    ) {\n      const hexColor = event.currentTarget.value.slice(1).toUpperCase()\n      setOriginalHexColor(hexColor)\n    },\n    [])\n\n    const handleHexColorSelectorInput = useCallback(\n      function (event: Event.onInput<HTMLInputElement>) {\n        const hexColor = event.currentTarget.value.slice(1).toUpperCase()\n        setHexColorInputElementValue(hexColor)\n      },\n      [setHexColorInputElementValue]\n    )\n\n    const handleHexColorSelectorKeyDown = useCallback(\n      function (event: Event.onKeyDown<HTMLInputElement>) {\n        if (event.key !== 'Escape') {\n          return\n        }\n        if (revertOnEscapeKeyDown === true) {\n          revertOnEscapeKeyDownRef.current = true\n          setHexColorInputElementValue(originalHexColor)\n          setOriginalHexColor(EMPTY_STRING)\n        }\n        if (propagateEscapeKeyDown === false) {\n          event.stopPropagation()\n        }\n        event.currentTarget.blur()\n      },\n      [\n        originalHexColor,\n        propagateEscapeKeyDown,\n        revertOnEscapeKeyDown,\n        setHexColorInputElementValue\n      ]\n    )\n\n    const handleHexColorBlur = useCallback(\n      function () {\n        if (revertOnEscapeKeyDownRef.current === true) {\n          revertOnEscapeKeyDownRef.current = false\n          return\n        }\n        if (hexColor === EMPTY_STRING) {\n          if (originalHexColor !== EMPTY_STRING) {\n            setHexColorInputElementValue(originalHexColor)\n          }\n          setOriginalHexColor(EMPTY_STRING)\n          return\n        }\n        if (hexColor !== MIXED_STRING) {\n          const normalizedHexColor = normalizeUserInputColor(hexColor)\n          const newHexColor =\n            normalizedHexColor === null ? originalHexColor : normalizedHexColor\n          if (newHexColor !== hexColor) {\n            setHexColorInputElementValue(newHexColor)\n          }\n        }\n        setOriginalHexColor(EMPTY_STRING)\n      },\n      [hexColor, originalHexColor, setHexColorInputElementValue]\n    )\n\n    const handleHexColorFocus = useCallback(\n      function (event: Event.onFocus<HTMLInputElement>) {\n        setOriginalHexColor(hexColor)\n        event.currentTarget.select()\n      },\n      [hexColor]\n    )\n\n    const handleHexColorInput = useCallback(\n      function (event: Event.onInput<HTMLInputElement>) {\n        onHexColorInput(event)\n        const newHexColor = event.currentTarget.value\n        onHexColorValueInput(newHexColor)\n        if (newHexColor === EMPTY_STRING) {\n          onRgbaColorValueInput(null)\n          return\n        }\n        const normalizedHexColor = normalizeUserInputColor(newHexColor)\n        if (normalizedHexColor === null) {\n          onRgbaColorValueInput(null)\n          return\n        }\n        const rgba = createRgbaColor(normalizedHexColor, opacity)\n        onRgbaColorValueInput(rgba)\n      },\n      [onHexColorInput, onHexColorValueInput, onRgbaColorValueInput, opacity]\n    )\n\n    const handleHexColorKeyDown = useCallback(\n      function (event: Event.onKeyDown<HTMLInputElement>) {\n        onHexColorKeyDown(event)\n        const key = event.key\n        if (key === 'Escape') {\n          if (revertOnEscapeKeyDown === true) {\n            revertOnEscapeKeyDownRef.current = true\n            setHexColorInputElementValue(originalHexColor)\n            setOriginalHexColor(EMPTY_STRING)\n          }\n          if (propagateEscapeKeyDown === false) {\n            event.stopPropagation()\n          }\n          event.currentTarget.blur()\n          return\n        }\n        const element = event.currentTarget\n        if (key === 'ArrowDown' || key === 'ArrowUp') {\n          event.preventDefault()\n          const delta = event.shiftKey === true ? 10 : 1\n          const startingHexColor =\n            hexColor === EMPTY_STRING || hexColor === MIXED_STRING\n              ? key === 'ArrowDown'\n                ? 'FFFFFF'\n                : '000000'\n              : hexColor\n          const newHexColor = updateHexColor(\n            startingHexColor,\n            key === 'ArrowDown' ? -1 * delta : delta\n          )\n          setHexColorInputElementValue(newHexColor)\n          element.select()\n          return\n        }\n        if (event.ctrlKey === true || event.metaKey === true) {\n          return\n        }\n      },\n      [\n        hexColor,\n        onHexColorKeyDown,\n        originalHexColor,\n        propagateEscapeKeyDown,\n        revertOnEscapeKeyDown,\n        setHexColorInputElementValue\n      ]\n    )\n\n    const handleHexColorMouseUp = useCallback(\n      function (event: Event.onMouseUp<HTMLInputElement>) {\n        if (hexColor !== MIXED_STRING) {\n          return\n        }\n        event.preventDefault()\n      },\n      [hexColor]\n    )\n\n    const handleOpacityInput = useCallback(\n      function (event: Event.onInput<HTMLInputElement>) {\n        onOpacityInput(event)\n        const newOpacity = event.currentTarget.value\n        const rgba = createRgbaColor(hexColor, newOpacity)\n        onRgbaColorValueInput(rgba)\n      },\n      [hexColor, onOpacityInput, onRgbaColorValueInput]\n    )\n\n    const handleOpacityNumericValueInput = useCallback(\n      function (opacity: null | number) {\n        onOpacityNumericValueInput(\n          opacity === null || opacity === MIXED_NUMBER ? opacity : opacity / 100\n        )\n      },\n      [onOpacityNumericValueInput]\n    )\n\n    const validateOpacityOnBlur = useCallback(function (\n      opacity: null | number\n    ) {\n      return opacity !== null // Revert the original value if empty\n    },\n    [])\n\n    const parsedOpacity = parseOpacity(opacity)\n\n    const isHexColorValid =\n      hexColor !== EMPTY_STRING && hexColor !== MIXED_STRING\n    const normalizedHexColor =\n      isHexColorValid === true ? normalizeUserInputColor(hexColor) : 'FFFFFF'\n    const renderedHexColor =\n      normalizedHexColor === null ? originalHexColor : normalizedHexColor\n\n    // Uncomment to debug\n    // console.table([{ hexColor, renderedHexColor, opacity, parsedOpacity }])\n\n    return (\n      <div\n        ref={ref}\n        class={createClassName([\n          styles.textboxColor,\n          typeof variant === 'undefined'\n            ? null\n            : variant === 'border'\n            ? styles.hasBorder\n            : null,\n          disabled === true ? styles.disabled : null\n        ])}\n      >\n        <div class={styles.color}>\n          <div\n            class={styles.colorFill}\n            style={\n              isHexColorValid === true\n                ? { backgroundColor: `#${renderedHexColor}` }\n                : {}\n            }\n          ></div>\n          {parsedOpacity === 1 ? null : (\n            <div\n              class={styles.colorFill}\n              style={\n                isHexColorValid === true\n                  ? {\n                      backgroundColor: `#${renderedHexColor}`,\n                      opacity: parsedOpacity\n                    }\n                  : {}\n              }\n            ></div>\n          )}\n          <div class={styles.colorBorder} />\n        </div>\n        <input\n          class={styles.hexColorSelector}\n          disabled={disabled === true}\n          onFocus={handleHexColorSelectorFocus}\n          onInput={handleHexColorSelectorInput}\n          onKeyDown={handleHexColorSelectorKeyDown}\n          tabIndex={-1}\n          type=\"color\"\n          value={`#${renderedHexColor}`}\n        />\n        <input\n          {...rest}\n          ref={hexColorInputElementRef}\n          class={createClassName([styles.input, styles.hexColorInput])}\n          disabled={disabled === true}\n          onBlur={handleHexColorBlur}\n          onFocus={handleHexColorFocus}\n          onInput={handleHexColorInput}\n          onKeyDown={handleHexColorKeyDown}\n          onMouseUp={handleHexColorMouseUp}\n          placeholder={hexColorPlaceholder}\n          spellcheck={false}\n          tabIndex={0}\n          type=\"text\"\n          value={hexColor === MIXED_STRING ? 'Mixed' : hexColor}\n        />\n        <RawTextboxNumeric\n          ref={opacityInputElementRef}\n          class={createClassName([styles.input, styles.opacityInput])}\n          disabled={disabled === true}\n          maximum={100}\n          minimum={0}\n          onInput={handleOpacityInput}\n          onKeyDown={onOpacityKeyDown}\n          onNumericValueInput={handleOpacityNumericValueInput}\n          onValueInput={onOpacityValueInput}\n          placeholder={opacityPlaceholder}\n          propagateEscapeKeyDown={propagateEscapeKeyDown}\n          revertOnEscapeKeyDown={revertOnEscapeKeyDown}\n          suffix=\"%\"\n          validateOnBlur={validateOpacityOnBlur}\n          value={opacity}\n        />\n        <div class={styles.divider} />\n        <div class={styles.border} />\n        {variant === 'underline' ? <div class={styles.underline} /> : null}\n      </div>\n    )\n  }\n)\n\nfunction parseOpacity(opacity: string): number {\n  if (opacity === MIXED_STRING || opacity === EMPTY_STRING) {\n    return 1\n  }\n  return parseInt(opacity, 10) / 100\n}\n"],"names":["hexCharacters","match3or4Hex","match6or8Hex","nonHexChars","validHexSize","hexRgb","hex","options","alphaFromHex","number","red","green","blue","alpha","alphaString","convertHexColorToRgbColor","hexColor","length","b","g","r","NAMED_COLORS","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","convertNamedColorToHexColor","namedColor","toLowerCase","toHex","rgbHex","isPercent","parsed","parseCssRgbString","input","parts","parseValue","value","max","convertRgbColorToHexColor","rgbColor","Math","round","toUpperCase","isValidHexColor","createRgbaColor","opacity","MIXED_STRING","rgb","a","parseInt","normalizeUserInputColor","string","parsedNamedColor","createHexColor","Array","fill","join","slice","updateHexColor","delta","Error","result","updateValue","newValue","min","EMPTY_STRING","TextboxColor","createComponent","disabled","hexColorPlaceholder","onHexColorInput","noop","onHexColorKeyDown","onHexColorValueInput","onOpacityInput","onOpacityKeyDown","onOpacityNumericValueInput","onOpacityValueInput","onRgbaColorValueInput","opacityPlaceholder","propagateEscapeKeyDown","revertOnEscapeKeyDown","variant","rest","ref","hexColorInputElementRef","useRef","opacityInputElementRef","revertOnEscapeKeyDownRef","originalHexColor","setOriginalHexColor","useState","setHexColorInputElementValue","useCallback","inputElement","getCurrentFromRef","inputEvent","window","Event","bubbles","cancelable","dispatchEvent","handleHexColorSelectorFocus","event","currentTarget","handleHexColorSelectorInput","handleHexColorSelectorKeyDown","key","current","stopPropagation","blur","handleHexColorBlur","normalizedHexColor","newHexColor","handleHexColorFocus","select","handleHexColorInput","rgba","handleHexColorKeyDown","element","preventDefault","shiftKey","ctrlKey","metaKey","handleHexColorMouseUp","handleOpacityInput","newOpacity","handleOpacityNumericValueInput","MIXED_NUMBER","validateOpacityOnBlur","parsedOpacity","parseOpacity","isHexColorValid","renderedHexColor","_jsxs","class","createClassName","styles","textboxColor","hasBorder","children","color","_jsx","colorFill","style","backgroundColor","colorBorder","hexColorSelector","onFocus","onInput","onKeyDown","tabIndex","type","hexColorInput","onBlur","onMouseUp","placeholder","spellcheck","RawTextboxNumeric","opacityInput","maximum","minimum","onNumericValueInput","onValueInput","suffix","validateOnBlur","divider","border","underline"],"mappings":"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","x_google_ignoreList":[0,4]}