{"version":3,"file":"dropdown-b227bbc2.js","sources":["../../src/hooks/use-scrollable-menu.ts","../../src/components/dropdown/private/constants.ts","../../src/components/dropdown/private/update-menu-element-layout.ts","../../src/components/dropdown/dropdown.tsx"],"sourcesContent":["import { JSX, RefObject } from 'preact'\nimport { useCallback } from 'preact/hooks'\n\nimport { getCurrentFromRef } from '../utilities/get-current-from-ref.js'\n\nexport function useScrollableMenu(options: {\n  itemIdDataAttributeName: string\n  menuElementRef: RefObject<HTMLDivElement>\n  selectedId: null | string\n  setSelectedId: (selectedId: string) => void\n}): {\n  handleScrollableMenuKeyDown: (\n    event: JSX.TargetedKeyboardEvent<HTMLElement>\n  ) => void\n  handleScrollableMenuItemMouseMove: (\n    event: JSX.TargetedMouseEvent<HTMLElement>\n  ) => void\n} {\n  const { itemIdDataAttributeName, menuElementRef, selectedId, setSelectedId } =\n    options\n\n  const getItemElements = useCallback(\n    function (): Array<HTMLElement> {\n      return Array.from(\n        getCurrentFromRef(menuElementRef).querySelectorAll<HTMLElement>(\n          `[${itemIdDataAttributeName}]`\n        )\n      ).filter(function (element: HTMLElement): boolean {\n        return element.hasAttribute('disabled') === false\n      })\n    },\n    [itemIdDataAttributeName, menuElementRef]\n  )\n\n  const findIndexByItemId = useCallback(\n    function (id: null | string): number {\n      if (id === null) {\n        return -1\n      }\n      const index = getItemElements().findIndex(function (\n        element: HTMLElement\n      ): boolean {\n        return (element.getAttribute(itemIdDataAttributeName) as string) === id\n      })\n      if (index === -1) {\n        throw new Error('Invariant violation') // `id` is valid\n      }\n      return index\n    },\n    [getItemElements, itemIdDataAttributeName]\n  )\n\n  const updateScrollPosition = useCallback(\n    function (id: string): void {\n      const itemElements = getItemElements()\n      const index = findIndexByItemId(id)\n      const selectedElement = itemElements[index]\n      const selectedElementOffsetTop =\n        selectedElement.getBoundingClientRect().top\n      const menuElement = getCurrentFromRef(menuElementRef)\n      const menuElementOffsetTop = menuElement.getBoundingClientRect().top\n      if (selectedElementOffsetTop < menuElementOffsetTop) {\n        selectedElement.scrollIntoView()\n        return\n      }\n      const offsetBottom =\n        selectedElementOffsetTop + selectedElement.offsetHeight\n      if (offsetBottom > menuElementOffsetTop + menuElement.offsetHeight) {\n        selectedElement.scrollIntoView()\n      }\n    },\n    [findIndexByItemId, getItemElements, menuElementRef]\n  )\n\n  const handleScrollableMenuKeyDown = useCallback(\n    function (event: JSX.TargetedKeyboardEvent<HTMLElement>): void {\n      const key = event.key\n      if (key === 'ArrowDown' || key === 'ArrowUp') {\n        const itemElements = getItemElements()\n        const index = findIndexByItemId(selectedId)\n        let newIndex\n        if (key === 'ArrowDown') {\n          newIndex =\n            index === -1 || index === itemElements.length - 1 ? 0 : index + 1\n        } else {\n          newIndex =\n            index === -1 || index === 0 ? itemElements.length - 1 : index - 1\n        }\n        const selectedElement = itemElements[newIndex]\n        const newSelectedId = selectedElement.getAttribute(\n          itemIdDataAttributeName\n        ) as string\n        setSelectedId(newSelectedId)\n        updateScrollPosition(newSelectedId)\n      }\n    },\n    [\n      getItemElements,\n      findIndexByItemId,\n      itemIdDataAttributeName,\n      setSelectedId,\n      selectedId,\n      updateScrollPosition\n    ]\n  )\n\n  const handleScrollableMenuItemMouseMove = useCallback(\n    function (event: JSX.TargetedMouseEvent<HTMLElement>): void {\n      const id = event.currentTarget.getAttribute(\n        itemIdDataAttributeName\n      ) as string\n      if (id !== selectedId) {\n        setSelectedId(id)\n      }\n    },\n    [itemIdDataAttributeName, selectedId, setSelectedId]\n  )\n\n  return {\n    handleScrollableMenuItemMouseMove,\n    handleScrollableMenuKeyDown\n  }\n}\n","export const INVALID_ID = null\nexport const ITEM_ID_DATA_ATTRIBUTE_NAME = 'data-dropdown-item-id'\nexport const VIEWPORT_MARGIN = 16\n","import {\n  INVALID_ID,\n  ITEM_ID_DATA_ATTRIBUTE_NAME,\n  VIEWPORT_MARGIN\n} from './constants.js'\nimport { Id } from './types.js'\n\nexport function updateMenuElementLayout(\n  rootElement: HTMLDivElement,\n  menuElement: HTMLDivElement,\n  selectedId: Id\n) {\n  const menuElementMaxWidth = window.innerWidth - 2 * VIEWPORT_MARGIN\n  const menuElementMaxHeight = window.innerHeight - 2 * VIEWPORT_MARGIN\n  menuElement.style.maxWidth = `${menuElementMaxWidth}px`\n  menuElement.style.maxHeight = `${menuElementMaxHeight}px`\n\n  const selectedLabelElement = getSelectedLabelElement(menuElement, selectedId)\n  const rootElementBoundingClientRect = rootElement.getBoundingClientRect()\n  const isScrollable = menuElement.offsetHeight === menuElementMaxHeight\n\n  const left = computeMenuElementLeft({\n    menuWidth: menuElement.offsetWidth,\n    rootLeft: rootElementBoundingClientRect.left\n  })\n  const top = computeMenuElementTop({\n    isScrollable,\n    menuHeight: menuElement.offsetHeight,\n    rootHeight: rootElement.offsetHeight,\n    rootTop: rootElementBoundingClientRect.top,\n    selectedTop:\n      selectedLabelElement === null ? null : selectedLabelElement.offsetTop\n  })\n  menuElement.style.left = `${left}px`\n  menuElement.style.top = `${top}px`\n\n  if (selectedLabelElement !== null && isScrollable === true) {\n    menuElement.scrollTop = computeMenuElementScrollTop({\n      menuHeight: menuElement.offsetHeight,\n      menuScrollHeight: menuElement.scrollHeight,\n      menuTop: menuElement.getBoundingClientRect().top,\n      rootHeight: rootElement.offsetHeight,\n      rootTop: rootElementBoundingClientRect.top,\n      selectedHeight: selectedLabelElement.offsetHeight,\n      selectedTop: selectedLabelElement.offsetTop\n    })\n  }\n}\n\nfunction getSelectedLabelElement(\n  menuElement: HTMLDivElement,\n  selectedId: Id\n): null | HTMLLabelElement {\n  if (selectedId === INVALID_ID) {\n    return null\n  }\n  const selectedInputElement = menuElement.querySelector<HTMLInputElement>(\n    `[${ITEM_ID_DATA_ATTRIBUTE_NAME}='${selectedId}']`\n  )\n  if (selectedInputElement === null) {\n    throw new Error('Invariant violation')\n  }\n  const selectedLabelElement = selectedInputElement.parentElement\n  if (selectedLabelElement === null) {\n    throw new Error('Invariant violation')\n  }\n  return selectedLabelElement as HTMLLabelElement\n}\n\nfunction computeMenuElementLeft(options: {\n  menuWidth: number\n  rootLeft: number\n}): number {\n  const { rootLeft, menuWidth } = options\n  if (rootLeft <= VIEWPORT_MARGIN) {\n    return negate(rootLeft) + VIEWPORT_MARGIN\n  }\n  const left = negate(\n    rootLeft + menuWidth - (window.innerWidth - VIEWPORT_MARGIN)\n  )\n  return Math.min(left, 0)\n}\n\nfunction computeMenuElementTop(options: {\n  isScrollable: boolean\n  menuHeight: number\n  rootHeight: number\n  rootTop: number\n  selectedTop: null | number\n}): number {\n  const viewportHeight = window.innerHeight\n  const { isScrollable, menuHeight, rootHeight, rootTop, selectedTop } = options\n  if (rootTop <= VIEWPORT_MARGIN) {\n    return negate(rootTop) + VIEWPORT_MARGIN\n  }\n  if (rootTop + rootHeight >= viewportHeight - VIEWPORT_MARGIN) {\n    return negate(rootTop - (viewportHeight - VIEWPORT_MARGIN - menuHeight))\n  }\n\n  const minimumTop = negate(rootTop - VIEWPORT_MARGIN)\n  const maximumTop = viewportHeight - VIEWPORT_MARGIN - menuHeight - rootTop\n\n  if (selectedTop === null || isScrollable === true) {\n    // Return the `top` position of `menuElement` such that `menuElement` fits\n    // within the viewport height\n    const top = Math.min(negate((menuHeight - rootHeight) / 2), 0)\n    return restrictToRange(top, minimumTop, maximumTop)\n  }\n\n  // Return the `top` position of `menuElement` such that `selectedElement` is\n  // directly above the `rootElement`\n  return restrictToRange(negate(selectedTop), minimumTop, maximumTop)\n}\n\nfunction computeMenuElementScrollTop(options: {\n  menuHeight: number\n  menuScrollHeight: number\n  menuTop: number\n  rootHeight: number\n  rootTop: number\n  selectedHeight: number\n  selectedTop: number\n}): number {\n  const viewportHeight = window.innerHeight\n  const {\n    menuHeight,\n    menuScrollHeight,\n    menuTop,\n    rootHeight,\n    rootTop,\n    selectedTop,\n    selectedHeight\n  } = options\n  const minimumScrollTop = 0\n  const maximumScrollTop = menuScrollHeight - menuHeight\n  if (rootTop <= menuTop) {\n    return restrictToRange(selectedTop, minimumScrollTop, maximumScrollTop)\n  }\n  if (rootTop + rootHeight >= viewportHeight - VIEWPORT_MARGIN) {\n    return restrictToRange(\n      selectedTop + selectedHeight - menuHeight,\n      minimumScrollTop,\n      maximumScrollTop\n    )\n  }\n  return restrictToRange(\n    selectedTop - rootTop + menuTop,\n    minimumScrollTop,\n    maximumScrollTop\n  )\n}\n\nfunction negate(number: number): number {\n  return -1 * number\n}\n\nfunction restrictToRange(\n  number: number,\n  minimum: number,\n  maximum: number\n): number {\n  return Math.min(Math.max(number, minimum), maximum)\n}\n","import { ComponentChildren, h, JSX, RefObject } from 'preact'\nimport { useCallback, useRef, useState } from 'preact/hooks'\n\nimport menuStyles from '../../css/menu.module.css'\nimport { useMouseDownOutside } from '../../hooks/use-mouse-down-outside.js'\nimport { useScrollableMenu } from '../../hooks/use-scrollable-menu.js'\nimport { IconControlChevronDown8 } from '../../icons/icon-8/icon-control-chevron-down-8.js'\nimport { IconMenuCheckmarkChecked16 } from '../../icons/icon-16/icon-menu-checkmark-checked-16.js'\nimport { OnValueChange, Props } from '../../types/types.js'\nimport { createClassName } from '../../utilities/create-class-name.js'\nimport { getCurrentFromRef } from '../../utilities/get-current-from-ref.js'\nimport dropdownStyles from './dropdown.module.css'\nimport { INVALID_ID, ITEM_ID_DATA_ATTRIBUTE_NAME } from './private/constants.js'\nimport { Id } from './private/types.js'\nimport { updateMenuElementLayout } from './private/update-menu-element-layout.js'\n\nexport type DropdownProps<\n  Name extends string,\n  Value extends boolean | number | string = string\n> = {\n  disabled?: boolean\n  icon?: ComponentChildren\n  name?: Name\n  onChange?: OmitThisParameter<JSX.GenericEventHandler<HTMLInputElement>>\n  onValueChange?: OnValueChange<Value, Name>\n  options: Array<DropdownOption<Value>>\n  placeholder?: string\n  value: null | Value\n  variant?: DropdownVariant\n}\nexport type DropdownOption<Value extends boolean | number | string = string> =\n  | DropdownOptionHeader\n  | DropdownOptionValue<Value>\n  | DropdownOptionSeparator\nexport type DropdownOptionHeader = {\n  header: string\n}\nexport type DropdownOptionValue<Value> = {\n  disabled?: boolean\n  text?: string\n  value: Value\n}\nexport type DropdownOptionSeparator = {\n  separator: true\n}\nexport type DropdownVariant = 'border' | 'underline'\n\nexport function Dropdown<\n  Name extends string,\n  Value extends boolean | number | string = string\n>({\n  disabled = false,\n  icon,\n  name,\n  options,\n  onChange = function () {},\n  onValueChange = function () {},\n  placeholder,\n  value,\n  variant,\n  ...rest\n}: Props<HTMLDivElement, DropdownProps<Name, Value>>): JSX.Element {\n  if (typeof icon === 'string' && icon.length !== 1) {\n    throw new Error(`String \\`icon\\` must be a single character: ${icon}`)\n  }\n\n  const rootElementRef: RefObject<HTMLDivElement> = useRef(null)\n  const menuElementRef: RefObject<HTMLDivElement> = useRef(null)\n\n  const [isMenuVisible, setIsMenuVisible] = useState(false)\n\n  const index = findOptionIndexByValue(options, value)\n  if (value !== null && index === -1) {\n    throw new Error(`Invalid \\`value\\`: ${value}`)\n  }\n  const [selectedId, setSelectedId] = useState<Id>(\n    index === -1 ? INVALID_ID : `${index}`\n  )\n  const children =\n    typeof options[index] === 'undefined'\n      ? ''\n      : getDropdownOptionValue(options[index])\n\n  // Uncomment to debug\n  // console.table([{ isMenuVisible, selectedId }])\n\n  const { handleScrollableMenuKeyDown, handleScrollableMenuItemMouseMove } =\n    useScrollableMenu({\n      itemIdDataAttributeName: ITEM_ID_DATA_ATTRIBUTE_NAME,\n      menuElementRef,\n      selectedId: selectedId,\n      setSelectedId: setSelectedId\n    })\n\n  const triggerBlur = useCallback(function (): void {\n    setIsMenuVisible(false)\n    setSelectedId(INVALID_ID)\n    getCurrentFromRef(rootElementRef).blur()\n  }, [])\n\n  const triggerUpdateMenuElementLayout = useCallback(function (selectedId: Id) {\n    const rootElement = getCurrentFromRef(rootElementRef)\n    const menuElement = getCurrentFromRef(menuElementRef)\n    updateMenuElementLayout(rootElement, menuElement, selectedId)\n  }, [])\n\n  const handleRootFocus = useCallback(\n    function (): void {\n      if (isMenuVisible === true) {\n        return\n      }\n      // Show the menu and update the `selectedId` on focus\n      setIsMenuVisible(true)\n      if (value === null) {\n        triggerUpdateMenuElementLayout(selectedId)\n        return\n      }\n      const index = findOptionIndexByValue(options, value)\n      if (index === -1) {\n        throw new Error(`Invalid \\`value\\`: ${value}`)\n      }\n      const newSelectedId = `${index}`\n      setSelectedId(newSelectedId)\n      triggerUpdateMenuElementLayout(newSelectedId)\n    },\n    [isMenuVisible, options, selectedId, triggerUpdateMenuElementLayout, value]\n  )\n\n  const handleRootKeyDown = useCallback(\n    function (event: JSX.TargetedKeyboardEvent<HTMLDivElement>): void {\n      if (event.key === 'Escape' || event.key === 'Tab') {\n        triggerBlur()\n        return\n      }\n      if (event.key === 'Enter') {\n        if (selectedId !== INVALID_ID) {\n          const selectedElement = getCurrentFromRef(\n            menuElementRef\n          ).querySelector<HTMLInputElement>(\n            `[${ITEM_ID_DATA_ATTRIBUTE_NAME}='${selectedId}']`\n          )\n          if (selectedElement === null) {\n            throw new Error('Invariant violation') // `selectedId` is valid\n          }\n          selectedElement.checked = true\n          const changeEvent = document.createEvent('Event')\n          changeEvent.initEvent('change', true, true)\n          selectedElement.dispatchEvent(changeEvent)\n        }\n        triggerBlur()\n        return\n      }\n      handleScrollableMenuKeyDown(event)\n    },\n    [handleScrollableMenuKeyDown, selectedId, triggerBlur]\n  )\n\n  const handleRootMouseDown = useCallback(\n    function (event: JSX.TargetedMouseEvent<HTMLDivElement>): void {\n      // `mousedown` events from `menuElement` are stopped from propagating to `rootElement` by `handleMenuMouseDown`\n      if (isMenuVisible === false) {\n        return\n      }\n      event.preventDefault()\n      triggerBlur()\n    },\n    [isMenuVisible, triggerBlur]\n  )\n\n  const handleMenuMouseDown = useCallback(function (\n    event: JSX.TargetedMouseEvent<HTMLDivElement>\n  ): void {\n    // Stop the `mousedown` event from propagating to the `rootElement`\n    event.stopPropagation()\n  },\n  [])\n\n  const handleOptionChange = useCallback(\n    function (event: JSX.TargetedEvent<HTMLInputElement>): void {\n      const id = event.currentTarget.getAttribute(\n        ITEM_ID_DATA_ATTRIBUTE_NAME\n      ) as string\n      const optionValue = options[\n        parseInt(id, 10)\n      ] as DropdownOptionValue<Value>\n      const newValue = optionValue.value\n      onValueChange(newValue, name)\n      onChange(event)\n      triggerBlur()\n    },\n    [name, onChange, onValueChange, options, triggerBlur]\n  )\n\n  const handleMouseDownOutside = useCallback(\n    function (): void {\n      if (isMenuVisible === false) {\n        return\n      }\n      triggerBlur()\n    },\n    [isMenuVisible, triggerBlur]\n  )\n  useMouseDownOutside({\n    onMouseDownOutside: handleMouseDownOutside,\n    ref: rootElementRef\n  })\n\n  return (\n    <div\n      {...rest}\n      ref={rootElementRef}\n      class={createClassName([\n        dropdownStyles.dropdown,\n        typeof variant === 'undefined'\n          ? null\n          : variant === 'border'\n          ? dropdownStyles.hasBorder\n          : null,\n        typeof icon === 'undefined' ? null : dropdownStyles.hasIcon,\n        disabled === true ? dropdownStyles.disabled : null\n      ])}\n      onFocus={handleRootFocus}\n      onKeyDown={disabled === true ? undefined : handleRootKeyDown}\n      onMouseDown={handleRootMouseDown}\n      tabIndex={disabled === true ? -1 : 0}\n    >\n      {typeof icon === 'undefined' ? null : (\n        <div class={dropdownStyles.icon}>{icon}</div>\n      )}\n      {value === null ? (\n        typeof placeholder === 'undefined' ? (\n          <div class={dropdownStyles.empty} />\n        ) : (\n          <div\n            class={createClassName([\n              dropdownStyles.value,\n              dropdownStyles.placeholder\n            ])}\n          >\n            {placeholder}\n          </div>\n        )\n      ) : (\n        <div class={dropdownStyles.value}>{children}</div>\n      )}\n      <div class={dropdownStyles.chevronIcon}>\n        <IconControlChevronDown8 />\n      </div>\n      {variant === 'underline' ? (\n        <div class={dropdownStyles.underline} />\n      ) : null}\n      <div class={dropdownStyles.border} />\n      <div\n        ref={menuElementRef}\n        class={createClassName([\n          menuStyles.menu,\n          dropdownStyles.menu,\n          disabled === true || isMenuVisible === false\n            ? menuStyles.hidden\n            : null\n        ])}\n        onMouseDown={handleMenuMouseDown}\n      >\n        {options.map(function (\n          option: DropdownOption<Value>,\n          index: number\n        ): JSX.Element {\n          if ('separator' in option) {\n            return <hr key={index} class={menuStyles.optionSeparator} />\n          }\n          if ('header' in option) {\n            return (\n              <h1 key={index} class={menuStyles.optionHeader}>\n                {option.header}\n              </h1>\n            )\n          }\n          return (\n            <label\n              key={index}\n              class={createClassName([\n                menuStyles.optionValue,\n                option.disabled === true\n                  ? menuStyles.optionValueDisabled\n                  : null,\n                option.disabled !== true && `${index}` === selectedId\n                  ? menuStyles.optionValueSelected\n                  : null\n              ])}\n            >\n              <input\n                checked={value === option.value}\n                class={menuStyles.input}\n                disabled={option.disabled === true}\n                name={name}\n                // If clicked on an unselected element, set the value\n                onChange={\n                  value === option.value ? undefined : handleOptionChange\n                }\n                // Else blur if clicked on an already-selected element\n                onClick={value === option.value ? triggerBlur : undefined}\n                onMouseMove={handleScrollableMenuItemMouseMove}\n                tabIndex={-1}\n                type=\"radio\"\n                value={`${option.value}`}\n                {...{ [ITEM_ID_DATA_ATTRIBUTE_NAME]: `${index}` }}\n              />\n              {option.value === value ? (\n                <div class={menuStyles.checkIcon}>\n                  <IconMenuCheckmarkChecked16 />\n                </div>\n              ) : null}\n              {typeof option.text === 'undefined' ? option.value : option.text}\n            </label>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nfunction getDropdownOptionValue<\n  Value extends boolean | number | string = string\n>(option: DropdownOption<Value>): ComponentChildren {\n  if ('text' in option) {\n    return option.text\n  }\n  if ('value' in option) {\n    return option.value\n  }\n  throw new Error('Invariant violation')\n}\n\n// Returns the index of the option in `options` with the given `value`, else `-1`\nfunction findOptionIndexByValue<\n  Value extends boolean | number | string = string\n>(options: Array<DropdownOption<Value>>, value: null | Value): number {\n  if (value === null) {\n    return -1\n  }\n  let index = 0\n  for (const option of options) {\n    if ('value' in option && option.value === value) {\n      return index\n    }\n    index += 1\n  }\n  return -1\n}\n"],"names":["useScrollableMenu","options","itemIdDataAttributeName","menuElementRef","selectedId","setSelectedId","getItemElements","useCallback","Array","from","getCurrentFromRef","querySelectorAll","filter","element","hasAttribute","findIndexByItemId","id","index","findIndex","getAttribute","Error","updateScrollPosition","itemElements","selectedElement","selectedElementOffsetTop","getBoundingClientRect","top","menuElement","menuElementOffsetTop","scrollIntoView","offsetHeight","handleScrollableMenuKeyDown","event","key","newIndex","length","newSelectedId","handleScrollableMenuItemMouseMove","currentTarget","INVALID_ID","ITEM_ID_DATA_ATTRIBUTE_NAME","VIEWPORT_MARGIN","updateMenuElementLayout","rootElement","menuElementMaxWidth","window","innerWidth","menuElementMaxHeight","innerHeight","style","maxWidth","maxHeight","selectedLabelElement","getSelectedLabelElement","rootElementBoundingClientRect","isScrollable","left","computeMenuElementLeft","menuWidth","offsetWidth","rootLeft","computeMenuElementTop","menuHeight","rootHeight","rootTop","selectedTop","offsetTop","scrollTop","computeMenuElementScrollTop","menuScrollHeight","scrollHeight","menuTop","selectedHeight","selectedInputElement","querySelector","parentElement","negate","Math","min","viewportHeight","minimumTop","maximumTop","restrictToRange","minimumScrollTop","maximumScrollTop","number","minimum","maximum","max","Dropdown","disabled","icon","name","onChange","onValueChange","placeholder","value","variant","rest","rootElementRef","useRef","isMenuVisible","setIsMenuVisible","useState","findOptionIndexByValue","children","getDropdownOptionValue","triggerBlur","blur","triggerUpdateMenuElementLayout","handleRootFocus","handleRootKeyDown","checked","changeEvent","document","createEvent","initEvent","dispatchEvent","handleRootMouseDown","preventDefault","handleMenuMouseDown","stopPropagation","handleOptionChange","newValue","parseInt","handleMouseDownOutside","useMouseDownOutside","onMouseDownOutside","ref","_jsxs","class","createClassName","dropdownStyles","dropdown","hasBorder","hasIcon","onFocus","onKeyDown","undefined","onMouseDown","tabIndex","_jsx","empty","chevronIcon","IconControlChevronDown8","underline","border","menuStyles","menu","hidden","map","option","optionSeparator","optionHeader","header","optionValue","optionValueDisabled","optionValueSelected","input","onClick","onMouseMove","type","checkIcon","IconMenuCheckmarkChecked16","text"],"mappings":"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"}