{"version":3,"file":"search-textbox.stories-77b714fe.js","sources":["../../src/components/search-textbox/search-textbox.tsx"],"sourcesContent":["import { h, JSX, RefObject } from 'preact'\nimport { useCallback, useRef } from 'preact/hooks'\n\nimport { IconCross32 } from '../../icons/icon-32/icon-cross-32.js'\nimport { IconSearch32 } from '../../icons/icon-32/icon-search-32.js'\nimport { OnValueChange, Props } from '../../types/types.js'\nimport { createClassName } from '../../utilities/create-class-name.js'\nimport { getCurrentFromRef } from '../../utilities/get-current-from-ref.js'\nimport styles from './search-textbox.module.css'\n\nconst EMPTY_STRING = ''\n\nexport type SearchTextboxProps<Name extends string> = {\n  clearOnEscapeKeyDown?: boolean\n  disabled?: boolean\n  name?: Name\n  onInput?: OmitThisParameter<JSX.GenericEventHandler<HTMLInputElement>>\n  onValueInput?: OnValueChange<string, Name>\n  placeholder?: string\n  propagateEscapeKeyDown?: boolean\n  spellCheck?: boolean\n  value: string\n}\n\nexport function SearchTextbox<Name extends string>({\n  clearOnEscapeKeyDown = false,\n  disabled = false,\n  name,\n  onInput = function () {},\n  onValueInput = function () {},\n  placeholder,\n  propagateEscapeKeyDown = true,\n  spellCheck = false,\n  value,\n  ...rest\n}: Props<HTMLInputElement, SearchTextboxProps<Name>>): JSX.Element {\n  const inputElementRef: RefObject<HTMLInputElement> = useRef(null)\n\n  const handleClearButtonClick = useCallback(function (): void {\n    const inputElement = getCurrentFromRef(inputElementRef)\n    inputElement.value = EMPTY_STRING\n    const inputEvent = document.createEvent('Event')\n    inputEvent.initEvent('input', true, true)\n    inputElement.dispatchEvent(inputEvent)\n    inputElement.focus()\n  }, [])\n\n  const handleFocus = useCallback(function (\n    event: JSX.TargetedFocusEvent<HTMLInputElement>\n  ): void {\n    event.currentTarget.select()\n  },\n  [])\n\n  const handleInput = useCallback(\n    function (event: JSX.TargetedEvent<HTMLInputElement>): void {\n      onValueInput(event.currentTarget.value, name)\n      onInput(event)\n    },\n    [name, onInput, onValueInput]\n  )\n\n  const handleKeyDown = useCallback(\n    function (event: JSX.TargetedKeyboardEvent<HTMLInputElement>): void {\n      if (event.key !== 'Escape') {\n        return\n      }\n      if (\n        clearOnEscapeKeyDown === true &&\n        value !== EMPTY_STRING &&\n        value !== null\n      ) {\n        event.stopPropagation() // Clear the value without bubbling up the `Escape` key press\n        handleClearButtonClick()\n        return\n      }\n      if (propagateEscapeKeyDown === false) {\n        event.stopPropagation()\n      }\n      event.currentTarget.blur()\n    },\n    [\n      clearOnEscapeKeyDown,\n      handleClearButtonClick,\n      propagateEscapeKeyDown,\n      value\n    ]\n  )\n\n  return (\n    <div\n      class={createClassName([\n        styles.searchTextbox,\n        disabled === true ? styles.disabled : null\n      ])}\n    >\n      <input\n        {...rest}\n        ref={inputElementRef}\n        class={styles.input}\n        disabled={disabled === true}\n        name={name}\n        onFocus={handleFocus}\n        onInput={handleInput}\n        onKeyDown={handleKeyDown}\n        placeholder={placeholder}\n        spellcheck={spellCheck}\n        tabIndex={0}\n        type=\"text\"\n        value={value === null ? EMPTY_STRING : value}\n      />\n      <div class={styles.searchIcon}>\n        <IconSearch32 />\n      </div>\n      {value === null || value === EMPTY_STRING || disabled === true ? null : (\n        <button\n          class={styles.clearButton}\n          onClick={handleClearButtonClick}\n          tabIndex={0}\n        >\n          <IconCross32 />\n        </button>\n      )}\n    </div>\n  )\n}\n"],"names":["EMPTY_STRING","SearchTextbox","clearOnEscapeKeyDown","disabled","name","onInput","onValueInput","placeholder","propagateEscapeKeyDown","spellCheck","value","rest","inputElementRef","useRef","handleClearButtonClick","useCallback","inputElement","getCurrentFromRef","inputEvent","document","createEvent","initEvent","dispatchEvent","focus","handleFocus","event","currentTarget","select","handleInput","handleKeyDown","key","stopPropagation","blur","_jsxs","class","createClassName","styles","searchTextbox","children","_jsx","ref","input","onFocus","onKeyDown","spellcheck","tabIndex","type","searchIcon","IconSearch32","clearButton","onClick","IconCross32"],"mappings":"soBAUMA,EAAe,GAcd,SAASC,EAAmC,CACjDC,qBAAAA,EAAuB,GACvBC,SAAAA,EAAW,GACXC,KAAAA,EACAC,QAAAA,EAAU,UAAY,CAAC,EACvBC,aAAAA,EAAe,UAAY,CAAC,EAC5BC,YAAAA,GACAC,uBAAAA,EAAyB,GACzBC,WAAAA,GAAa,GACbC,MAAAA,EACA,GAAGC,EAC8C,EAAgB,CAC3DC,MAAAA,EAA+CC,GAAO,IAAI,EAE1DC,EAAyBC,EAAY,UAAkB,CACrDC,MAAAA,EAAeC,GAAkBL,CAAe,EACtDI,EAAaN,MAAQV,EACfkB,MAAAA,EAAaC,SAASC,YAAY,OAAO,EACpCC,EAAAA,UAAU,QAAS,GAAM,EAAI,EACxCL,EAAaM,cAAcJ,CAAU,EACrCF,EAAaO,MAAM,CACrB,EAAG,CAAE,CAAA,EAECC,GAAcT,EAAY,SAC9BU,EACM,CACNA,EAAMC,cAAcC,QACtB,EACA,CAAE,CAAA,EAEIC,GAAcb,EAClB,SAAUU,EAAkD,CAC7CA,EAAAA,EAAMC,cAAchB,MAAON,CAAI,EAC5CC,EAAQoB,CAAK,CAEf,EAAA,CAACrB,EAAMC,EAASC,CAAY,CAC9B,EAEMuB,GAAgBd,EACpB,SAAUU,EAA0D,CAC9DA,GAAAA,EAAMK,MAAQ,SAGlB,IACE5B,IAAyB,IACzBQ,IAAUV,GACVU,IAAU,KACV,CACAe,EAAMM,gBAAgB,EACCjB,IACvB,OAEEN,IAA2B,IAC7BiB,EAAMM,gBAAgB,EAExBN,EAAMC,cAAcM,SAEtB,CACE9B,EACAY,EACAN,EACAE,CAAK,CAET,EAEA,OACEuB,EAAA,MAAA,CACEC,MAAOC,GAAgB,CACrBC,EAAOC,cACPlC,IAAa,GAAOiC,EAAOjC,SAAW,IAAI,CAC3C,EAAEmC,UAEHC,EAAA,QAAA,CAAA,GACM5B,GACJ6B,IAAK5B,EACLsB,MAAOE,EAAOK,MACdtC,SAAUA,IAAa,GACvBC,KAAAA,EACAsC,QAASlB,GACTnB,QAASuB,GACTe,UAAWd,GACXtB,YAAAA,GACAqC,WAAYnC,GACZoC,SAAU,EACVC,KAAK,OACLpC,MAAOA,IAAU,KAAOV,EAAeU,CAAAA,CACxC,EACD6B,EAAA,MAAA,CAAKL,MAAOE,EAAOW,WAAWT,SAC5BC,EAACS,GAAc,EAAA,CAAA,CACZ,EACJtC,IAAU,MAAQA,IAAUV,GAAgBG,IAAa,GAAO,KAC/DoC,EAAA,SAAA,CACEL,MAAOE,EAAOa,YACdC,QAASpC,EACT+B,SAAU,EAAEP,SAEZC,EAACY,GAAa,EAAA,CAAA,CACR,CACT,CAAA,CACE,CAET;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}