{"version":3,"file":"segmented-control-b024ac2c.js","sources":["../../src/components/segmented-control/segmented-control.tsx"],"sourcesContent":["import { ComponentChildren, h, JSX } from 'preact'\nimport { useCallback } from 'preact/hooks'\n\nimport { OnValueChange, Props } from '../../types/types.js'\nimport { createClassName } from '../../utilities/create-class-name.js'\nimport styles from './segmented-control.module.css'\n\nconst ITEM_ID_DATA_ATTRIBUTE_NAME = 'data-segmented-control-item-id'\n\nexport type SegmentedControlProps<\n  Name extends string,\n  Value extends boolean | number | string\n> = {\n  disabled?: boolean\n  name?: Name\n  onChange?: OmitThisParameter<JSX.GenericEventHandler<HTMLInputElement>>\n  onValueChange?: OnValueChange<Value, Name>\n  options: Array<SegmentedControlOption<Value>>\n  propagateEscapeKeyDown?: boolean\n  value: Value\n}\nexport type SegmentedControlOption<\n  Value extends boolean | number | string = string\n> = {\n  disabled?: boolean\n  children?: ComponentChildren\n  value: Value\n}\n\nexport function SegmentedControl<\n  Name extends string,\n  Value extends boolean | number | string\n>({\n  disabled = false,\n  name,\n  onChange = function () {},\n  onValueChange = function () {},\n  options,\n  propagateEscapeKeyDown = true,\n  value,\n  ...rest\n}: Props<HTMLInputElement, SegmentedControlProps<Name, Value>>): JSX.Element {\n  const handleChange = useCallback(\n    function (event: JSX.TargetedEvent<HTMLInputElement>): void {\n      const id = event.currentTarget.getAttribute(\n        ITEM_ID_DATA_ATTRIBUTE_NAME\n      ) as string\n      const newValue = options[parseInt(id, 10)].value\n      onValueChange(newValue, name)\n      onChange(event)\n    },\n    [name, onChange, onValueChange, options]\n  )\n\n  const handleKeyDown = useCallback(\n    function (event: JSX.TargetedKeyboardEvent<HTMLInputElement>): void {\n      if (event.key !== 'Escape') {\n        return\n      }\n      if (propagateEscapeKeyDown === false) {\n        event.stopPropagation()\n      }\n      event.currentTarget.blur()\n    },\n    [propagateEscapeKeyDown]\n  )\n\n  return (\n    <div\n      class={createClassName([\n        styles.segmentedControl,\n        disabled === true ? styles.disabled : null\n      ])}\n    >\n      <div class={styles.labels}>\n        {options.map(function (\n          option: SegmentedControlOption<Value>,\n          index: number\n        ): JSX.Element {\n          const children =\n            typeof option.children === 'undefined'\n              ? `${option.value}`\n              : option.children\n          const isOptionDisabled = disabled === true || option.disabled === true\n          return (\n            <label key={index} class={styles.label}>\n              <input\n                {...rest}\n                checked={value === option.value}\n                class={styles.input}\n                disabled={isOptionDisabled === true}\n                name={name}\n                onChange={handleChange}\n                onKeyDown={handleKeyDown}\n                tabIndex={isOptionDisabled === true ? -1 : 0}\n                type=\"radio\"\n                value={`${option.value}`}\n                {...{ [ITEM_ID_DATA_ATTRIBUTE_NAME]: `${index}` }}\n              />\n              <div class={styles.children}>\n                <div\n                  class={typeof children === 'string' ? styles.text : undefined}\n                >\n                  {children}\n                </div>\n              </div>\n            </label>\n          )\n        })}\n      </div>\n      <div class={styles.border} />\n    </div>\n  )\n}\n"],"names":["ITEM_ID_DATA_ATTRIBUTE_NAME","SegmentedControl","disabled","name","onChange","onValueChange","options","propagateEscapeKeyDown","value","rest","handleChange","useCallback","event","id","currentTarget","getAttribute","newValue","parseInt","handleKeyDown","key","stopPropagation","blur","_jsxs","class","createClassName","styles","segmentedControl","children","_jsx","labels","map","option","index","isOptionDisabled","label","checked","input","onKeyDown","tabIndex","type","text","undefined","border"],"mappings":"kaAOMA,EAA8B,iCAsB7B,SAASC,EAGd,CACAC,SAAAA,EAAW,GACXC,KAAAA,EACAC,SAAAA,EAAW,UAAY,CAAC,EACxBC,cAAAA,EAAgB,UAAY,CAAC,EAC7BC,QAAAA,EACAC,uBAAAA,EAAyB,GACzBC,MAAAA,EACA,GAAGC,CACwD,EAAgB,CACrEC,MAAAA,EAAeC,EACnB,SAAUC,EAAkD,CAC1D,MAAMC,EAAKD,EAAME,cAAcC,aAC7Bf,CACF,EACMgB,EAAWV,EAAQW,SAASJ,EAAI,EAAE,CAAC,EAAEL,MAC3CH,EAAcW,EAAUb,CAAI,EAC5BC,EAASQ,CAAK,GAEhB,CAACT,EAAMC,EAAUC,EAAeC,CAAO,CACzC,EAEMY,EAAgBP,EACpB,SAAUC,EAA0D,CAC9DA,EAAMO,MAAQ,WAGdZ,IAA2B,IAC7BK,EAAMQ,gBAAgB,EAExBR,EAAME,cAAcO,OAAK,EAE3B,CAACd,CAAsB,CACzB,EAEA,OACEe,EAAA,MAAA,CACEC,MAAOC,EAAgB,CACrBC,EAAOC,iBACPxB,IAAa,GAAOuB,EAAOvB,SAAW,IAAI,CAC3C,EAAEyB,UAEHC,EAAA,MAAA,CAAKL,MAAOE,EAAOI,OAAOF,SACvBrB,EAAQwB,IAAI,SACXC,EACAC,EACa,CACPL,MAAAA,EACJ,OAAOI,EAAOJ,SAAa,IACtB,GAAEI,EAAOvB,QACVuB,EAAOJ,SACPM,EAAmB/B,IAAa,IAAQ6B,EAAO7B,WAAa,GAClE,OACEoB,EAAA,QAAA,CAAmBC,MAAOE,EAAOS,MAAMP,UACrCC,EAAA,QAAA,CAAA,GACMnB,EACJ0B,QAAS3B,IAAUuB,EAAOvB,MAC1Be,MAAOE,EAAOW,MACdlC,SAAU+B,IAAqB,GAC/B9B,KAAAA,EACAC,SAAUM,EACV2B,UAAWnB,EACXoB,SAAUL,IAAqB,GAAO,GAAK,EAC3CM,KAAK,QACL/B,MAAQ,GAAEuB,EAAOvB,QACX,CAACR,CAA2B,EAAI,GAAEgC,GAAAA,CACzC,EACDJ,EAAA,MAAA,CAAKL,MAAOE,EAAOE,SAASA,SAC1BC,EAAA,MAAA,CACEL,MAAO,OAAOI,GAAa,SAAWF,EAAOe,KAAOC,OAAUd,SAAAA,CAAAA,CAG3D,CAAA,CACF,CAAC,GApBIK,CAqBL,CAAA,CAEV,CAAA,CACE,EACLJ,EAAA,MAAA,CAAKL,MAAOE,EAAOiB,MAAAA,CAAS,CAAC,CAAA,CAC1B,CAET"}