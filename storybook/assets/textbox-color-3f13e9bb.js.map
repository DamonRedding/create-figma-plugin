{"version":3,"file":"textbox-color-3f13e9bb.js","sources":["../../../../node_modules/hex-rgb/index.js","../../../utilities/lib/color/convert-hex-color-to-rgb-color.js","../../../utilities/lib/color/private/named-colors.js","../../../utilities/lib/color/convert-named-color-to-hex-color.js","../../../../node_modules/rgb-hex/index.js","../../../utilities/lib/color/convert-rgb-color-to-hex-color.js","../../../utilities/lib/color/is-valid-hex-color.js","../../src/components/textbox/textbox-color/private/create-rgba-color.ts","../../src/components/textbox/textbox-color/private/normalize-hex-color.ts","../../src/components/textbox/textbox-color/private/update-hex-color.ts","../../src/components/textbox/textbox-color/textbox-color.tsx"],"sourcesContent":["const hexCharacters = 'a-f\\\\d';\nconst match3or4Hex = `#?[${hexCharacters}]{3}[${hexCharacters}]?`;\nconst match6or8Hex = `#?[${hexCharacters}]{6}([${hexCharacters}]{2})?`;\nconst nonHexChars = new RegExp(`[^#${hexCharacters}]`, 'gi');\nconst validHexSize = new RegExp(`^${match3or4Hex}$|^${match6or8Hex}$`, 'i');\n\nexport default function hexRgb(hex, options = {}) {\n\tif (typeof hex !== 'string' || nonHexChars.test(hex) || !validHexSize.test(hex)) {\n\t\tthrow new TypeError('Expected a valid hex string');\n\t}\n\n\thex = hex.replace(/^#/, '');\n\tlet alphaFromHex = 1;\n\n\tif (hex.length === 8) {\n\t\talphaFromHex = Number.parseInt(hex.slice(6, 8), 16) / 255;\n\t\thex = hex.slice(0, 6);\n\t}\n\n\tif (hex.length === 4) {\n\t\talphaFromHex = Number.parseInt(hex.slice(3, 4).repeat(2), 16) / 255;\n\t\thex = hex.slice(0, 3);\n\t}\n\n\tif (hex.length === 3) {\n\t\thex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n\t}\n\n\tconst number = Number.parseInt(hex, 16);\n\tconst red = number >> 16;\n\tconst green = (number >> 8) & 255;\n\tconst blue = number & 255;\n\tconst alpha = typeof options.alpha === 'number' ? options.alpha : alphaFromHex;\n\n\tif (options.format === 'array') {\n\t\treturn [red, green, blue, alpha];\n\t}\n\n\tif (options.format === 'css') {\n\t\tconst alphaString = alpha === 1 ? '' : ` / ${Number((alpha * 100).toFixed(2))}%`;\n\t\treturn `rgb(${red} ${green} ${blue}${alphaString})`;\n\t}\n\n\treturn {red, green, blue, alpha};\n}\n","import hexRgb from 'hex-rgb';\nexport function convertHexColorToRgbColor(hexColor) {\n    if (hexColor.length !== 3 && hexColor.length !== 6) {\n        return null;\n    }\n    try {\n        const { red, green, blue } = hexRgb(hexColor);\n        return {\n            b: blue / 255,\n            g: green / 255,\n            r: red / 255\n        };\n    }\n    catch {\n        return null;\n    }\n}\n//# sourceMappingURL=convert-hex-color-to-rgb-color.js.map","export const NAMED_COLORS = {\n    aliceblue: 'F0F8FF',\n    antiquewhite: 'FAEBD7',\n    aqua: '00FFFF',\n    aquamarine: '7FFFD4',\n    azure: 'F0FFFF',\n    beige: 'F5F5DC',\n    bisque: 'FFE4C4',\n    black: '000000',\n    blanchedalmond: 'FFEBCD',\n    blue: '0000FF',\n    blueviolet: '8A2BE2',\n    brown: 'A52A2A',\n    burlywood: 'DEB887',\n    cadetblue: '5F9EA0',\n    chartreuse: '7FFF00',\n    chocolate: 'D2691E',\n    coral: 'FF7F50',\n    cornflowerblue: '6495ED',\n    cornsilk: 'FFF8DC',\n    crimson: 'DC143C',\n    cyan: '00FFFF',\n    darkblue: '00008B',\n    darkcyan: '008B8B',\n    darkgoldenrod: 'B8860B',\n    darkgray: 'A9A9A9',\n    darkgreen: '006400',\n    darkgrey: 'A9A9A9',\n    darkkhaki: 'BDB76B',\n    darkmagenta: '8B008B',\n    darkolivegreen: '556B2F',\n    darkorange: 'FF8C00',\n    darkorchid: '9932CC',\n    darkred: '8B0000',\n    darksalmon: 'E9967A',\n    darkseagreen: '8FBC8F',\n    darkslateblue: '483D8B',\n    darkslategray: '2F4F4F',\n    darkslategrey: '2F4F4F',\n    darkturquoise: '00CED1',\n    darkviolet: '9400D3',\n    deeppink: 'FF1493',\n    deepskyblue: '00BFFF',\n    dimgray: '696969',\n    dimgrey: '696969',\n    dodgerblue: '1E90FF',\n    firebrick: 'B22222',\n    floralwhite: 'FFFAF0',\n    forestgreen: '228B22',\n    fuchsia: 'FF00FF',\n    gainsboro: 'DCDCDC',\n    ghostwhite: 'F8F8FF',\n    gold: 'FFD700',\n    goldenrod: 'DAA520',\n    gray: '808080',\n    green: '008000',\n    greenyellow: 'ADFF2F',\n    grey: '808080',\n    honeydew: 'F0FFF0',\n    hotpink: 'FF69B4',\n    indianred: 'CD5C5C',\n    indigo: '4B0082',\n    ivory: 'FFFFF0',\n    khaki: 'F0E68C',\n    lavender: 'E6E6FA',\n    lavenderblush: 'FFF0F5',\n    lawngreen: '7CFC00',\n    lemonchiffon: 'FFFACD',\n    lightblue: 'ADD8E6',\n    lightcoral: 'F08080',\n    lightcyan: 'E0FFFF',\n    lightgoldenrodyellow: 'FAFAD2',\n    lightgray: 'D3D3D3',\n    lightgreen: '90EE90',\n    lightgrey: 'D3D3D3',\n    lightpink: 'FFB6C1',\n    lightsalmon: 'FFA07A',\n    lightseagreen: '20B2AA',\n    lightskyblue: '87CEFA',\n    lightslategray: '778899',\n    lightslategrey: '778899',\n    lightsteelblue: 'B0C4DE',\n    lightyellow: 'FFFFE0',\n    lime: '00FF00',\n    limegreen: '32CD32',\n    linen: 'FAF0E6',\n    magenta: 'FF00FF',\n    maroon: '800000',\n    mediumaquamarine: '66CDAA',\n    mediumblue: '0000CD',\n    mediumorchid: 'BA55D3',\n    mediumpurple: '9370DB',\n    mediumseagreen: '3CB371',\n    mediumslateblue: '7B68EE',\n    mediumspringgreen: '00FA9A',\n    mediumturquoise: '48D1CC',\n    mediumvioletred: 'C71585',\n    midnightblue: '191970',\n    mintcream: 'F5FFFA',\n    mistyrose: 'FFE4E1',\n    moccasin: 'FFE4B5',\n    navajowhite: 'FFDEAD',\n    navy: '000080',\n    oldlace: 'FDF5E6',\n    olive: '808000',\n    olivedrab: '6B8E23',\n    orange: 'FFA500',\n    orangered: 'FF4500',\n    orchid: 'DA70D6',\n    palegoldenrod: 'EEE8AA',\n    palegreen: '98FB98',\n    paleturquoise: 'AFEEEE',\n    palevioletred: 'DB7093',\n    papayawhip: 'FFEFD5',\n    peachpuff: 'FFDAB9',\n    peru: 'CD853F',\n    pink: 'FFC0CB',\n    plum: 'DDA0DD',\n    powderblue: 'B0E0E6',\n    purple: '800080',\n    rebeccapurple: '663399',\n    red: 'FF0000',\n    rosybrown: 'BC8F8F',\n    royalblue: '4169E1',\n    saddlebrown: '8B4513',\n    salmon: 'FA8072',\n    sandybrown: 'F4A460',\n    seagreen: '2E8B57',\n    seashell: 'FFF5EE',\n    sienna: 'A0522D',\n    silver: 'C0C0C0',\n    skyblue: '87CEEB',\n    slateblue: '6A5ACD',\n    slategray: '708090',\n    slategrey: '708090',\n    snow: 'FFFAFA',\n    springgreen: '00FF7F',\n    steelblue: '4682B4',\n    tan: 'D2B48C',\n    teal: '008080',\n    thistle: 'D8BFD8',\n    tomato: 'FF6347',\n    turquoise: '40E0D0',\n    violet: 'EE82EE',\n    wheat: 'F5DEB3',\n    white: 'FFFFFF',\n    whitesmoke: 'F5F5F5',\n    yellow: 'FFFF00',\n    yellowgreen: '9ACD32'\n};\n//# sourceMappingURL=named-colors.js.map","import { NAMED_COLORS } from './private/named-colors.js';\nexport function convertNamedColorToHexColor(namedColor) {\n    const hexColor = NAMED_COLORS[namedColor.toLowerCase()];\n    if (typeof hexColor === 'undefined') {\n        return null;\n    }\n    return hexColor;\n}\n//# sourceMappingURL=convert-named-color-to-hex-color.js.map","export default function rgbHex(red, green, blue, alpha) {\n\tconst isPercent = (red + (alpha || '')).toString().includes('%');\n\n\tif (typeof red === 'string') {\n\t\t[red, green, blue, alpha] = red.match(/(0?\\.?\\d+)%?\\b/g).map(component => Number(component));\n\t} else if (alpha !== undefined) {\n\t\talpha = Number.parseFloat(alpha);\n\t}\n\n\tif (typeof red !== 'number' ||\n\t\ttypeof green !== 'number' ||\n\t\ttypeof blue !== 'number' ||\n\t\tred > 255 ||\n\t\tgreen > 255 ||\n\t\tblue > 255\n\t) {\n\t\tthrow new TypeError('Expected three numbers below 256');\n\t}\n\n\tif (typeof alpha === 'number') {\n\t\tif (!isPercent && alpha >= 0 && alpha <= 1) {\n\t\t\talpha = Math.round(255 * alpha);\n\t\t} else if (isPercent && alpha >= 0 && alpha <= 100) {\n\t\t\talpha = Math.round(255 * alpha / 100);\n\t\t} else {\n\t\t\tthrow new TypeError(`Expected alpha value (${alpha}) as a fraction or percentage`);\n\t\t}\n\n\t\talpha = (alpha | 1 << 8).toString(16).slice(1); // eslint-disable-line no-mixed-operators\n\t} else {\n\t\talpha = '';\n\t}\n\n\t// TODO: Remove this ignore comment.\n\t// eslint-disable-next-line no-mixed-operators\n\treturn ((blue | green << 8 | red << 16) | 1 << 24).toString(16).slice(1) + alpha;\n}\n","import rgbHex from 'rgb-hex';\nexport function convertRgbColorToHexColor(rgbColor) {\n    const { r, g, b } = rgbColor;\n    if (r < 0 || r > 1 || g < 0 || g > 1 || b < 0 || b > 1) {\n        return null;\n    }\n    try {\n        return rgbHex(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)).toUpperCase();\n    }\n    catch {\n        return null;\n    }\n}\n//# sourceMappingURL=convert-rgb-color-to-hex-color.js.map","import { convertHexColorToRgbColor } from './convert-hex-color-to-rgb-color.js';\nexport function isValidHexColor(hexColor) {\n    return convertHexColorToRgbColor(hexColor) !== null;\n}\n//# sourceMappingURL=is-valid-hex-color.js.map","import {\n  convertHexColorToRgbColor,\n  MIXED_STRING\n} from '@create-figma-plugin/utilities'\n\nexport function createRgbaColor(\n  hexColor: string,\n  opacity: string\n): null | RGBA {\n  if (\n    hexColor === '' ||\n    hexColor === MIXED_STRING ||\n    opacity === '' ||\n    opacity === MIXED_STRING\n  ) {\n    return null\n  }\n  const rgb = convertHexColorToRgbColor(hexColor)\n  if (rgb === null) {\n    return null\n  }\n  return {\n    ...rgb,\n    a: parseInt(opacity, 10) / 100\n  }\n}\n","import {\n  convertNamedColorToHexColor,\n  isValidHexColor\n} from '@create-figma-plugin/utilities'\n\nexport function normalizeUserInputColor(string: string): null | string {\n  const parsedNamedColor = convertNamedColorToHexColor(string)\n  if (parsedNamedColor !== null) {\n    return parsedNamedColor\n  }\n  const hexColor = createHexColor(string).toUpperCase()\n  if (isValidHexColor(hexColor) === false) {\n    return null\n  }\n  return hexColor\n}\n\nfunction createHexColor(string: string): string {\n  switch (string.length) {\n    case 0: {\n      return ''\n    }\n    case 1: {\n      return Array(6).fill(string).join('')\n    }\n    case 2: {\n      return Array(3).fill(string).join('')\n    }\n    case 3:\n    case 4:\n    case 5: {\n      return `${string[0]}${string[0]}${string[1]}${string[1]}${string[2]}${string[2]}`\n    }\n    case 6: {\n      return string\n    }\n    default: {\n      return string.slice(0, 6)\n    }\n  }\n}\n","import {\n  convertHexColorToRgbColor,\n  convertRgbColorToHexColor\n} from '@create-figma-plugin/utilities'\n\nexport function updateHexColor(hexColor: string, delta: number): string {\n  const rgbColor = convertHexColorToRgbColor(hexColor)\n  if (rgbColor === null) {\n    throw new Error('Invalid `hexColor`')\n  }\n  const { r, g, b } = rgbColor\n  const result = convertRgbColorToHexColor({\n    b: updateValue(b, delta),\n    g: updateValue(g, delta),\n    r: updateValue(r, delta)\n  })\n  if (result === null) {\n    throw new Error('Invalid `rgbColor`')\n  }\n  return result\n}\n\nfunction updateValue(value: number, delta: number): number {\n  const newValue = value * 255 + delta\n  return Math.min(Math.max(newValue, 0), 255) / 255\n}\n","import { MIXED_NUMBER, MIXED_STRING } from '@create-figma-plugin/utilities'\nimport { h, JSX, RefObject } from 'preact'\nimport { useCallback, useRef, useState } from 'preact/hooks'\n\nimport { OnValueChange, Props } from '../../../types/types.js'\nimport { createClassName } from '../../../utilities/create-class-name.js'\nimport { getCurrentFromRef } from '../../../utilities/get-current-from-ref.js'\nimport { RawTextboxNumeric } from '../textbox-numeric/private/raw-textbox-numeric.js'\nimport { createRgbaColor } from './private/create-rgba-color.js'\nimport { normalizeUserInputColor } from './private/normalize-hex-color.js'\nimport { updateHexColor } from './private/update-hex-color.js'\nimport styles from './textbox-color.module.css'\n\nconst EMPTY_STRING = ''\n\nexport type TextboxColorProps<\n  Name extends string,\n  HexColorName extends string,\n  OpacityName extends string\n> = {\n  disabled?: boolean\n  hexColor: string\n  hexColorName?: HexColorName\n  hexColorPlaceholder?: string\n  name?: Name\n  onHexColorInput?: OmitThisParameter<JSX.GenericEventHandler<HTMLInputElement>>\n  onHexColorValueInput?: OnValueChange<string, HexColorName>\n  onOpacityInput?: OmitThisParameter<JSX.GenericEventHandler<HTMLInputElement>>\n  onOpacityNumericValueInput?: OnValueChange<null | number, OpacityName>\n  onOpacityValueInput?: OnValueChange<string, OpacityName>\n  onRgbaColorValueInput?: OnValueChange<null | RGBA, Name>\n  opacity: string\n  opacityName?: OpacityName\n  opacityPlaceholder?: string\n  propagateEscapeKeyDown?: boolean\n  revertOnEscapeKeyDown?: boolean\n  variant?: TextboxColorVariant\n}\nexport type TextboxColorVariant = 'border' | 'underline'\n\nexport function TextboxColor<\n  Name extends string,\n  HexColorName extends string,\n  OpacityName extends string\n>({\n  disabled = false,\n  hexColor,\n  hexColorName,\n  hexColorPlaceholder,\n  name,\n  onHexColorInput = function () {},\n  onHexColorValueInput = function () {},\n  onOpacityInput = function () {},\n  onOpacityNumericValueInput = function () {},\n  onOpacityValueInput = function () {},\n  onRgbaColorValueInput = function () {},\n  opacity,\n  opacityName,\n  opacityPlaceholder,\n  propagateEscapeKeyDown = true,\n  revertOnEscapeKeyDown = false,\n  variant,\n  ...rest\n}: Props<\n  HTMLInputElement,\n  TextboxColorProps<Name, HexColorName, OpacityName>\n>): JSX.Element {\n  const hexColorInputElementRef: RefObject<HTMLInputElement> = useRef(null)\n  const revertOnEscapeKeyDownRef: RefObject<boolean> = useRef(false) // Boolean flag to exit early from `handleBlur`\n\n  const [originalHexColor, setOriginalHexColor] = useState(EMPTY_STRING) // Value of the hex color textbox when it was initially focused\n\n  const setHexColorInputElementValue = useCallback(function (\n    value: string\n  ): void {\n    const inputElement = getCurrentFromRef(hexColorInputElementRef)\n    inputElement.value = value\n    const inputEvent = document.createEvent('Event')\n    inputEvent.initEvent('input', true, true)\n    inputElement.dispatchEvent(inputEvent)\n  },\n  [])\n\n  const handleHexColorSelectorFocus = useCallback(function (\n    event: JSX.TargetedEvent<HTMLInputElement>\n  ): void {\n    const hexColor = event.currentTarget.value.slice(1).toUpperCase()\n    setOriginalHexColor(hexColor)\n  },\n  [])\n\n  const handleHexColorSelectorInput = useCallback(\n    function (event: JSX.TargetedEvent<HTMLInputElement>): void {\n      const hexColor = event.currentTarget.value.slice(1).toUpperCase()\n      setHexColorInputElementValue(hexColor)\n    },\n    [setHexColorInputElementValue]\n  )\n\n  const handleHexColorSelectorKeyDown = useCallback(\n    function (event: JSX.TargetedKeyboardEvent<HTMLInputElement>): void {\n      if (event.key !== 'Escape') {\n        return\n      }\n      if (propagateEscapeKeyDown === false) {\n        event.stopPropagation()\n      }\n      if (revertOnEscapeKeyDown === true) {\n        setHexColorInputElementValue(originalHexColor)\n        setOriginalHexColor(EMPTY_STRING)\n      }\n      event.currentTarget.blur()\n    },\n    [\n      originalHexColor,\n      propagateEscapeKeyDown,\n      revertOnEscapeKeyDown,\n      setHexColorInputElementValue\n    ]\n  )\n\n  const handleHexColorBlur = useCallback(\n    function (): void {\n      if (revertOnEscapeKeyDownRef.current === true) {\n        revertOnEscapeKeyDownRef.current = false\n        return\n      }\n      if (hexColor === EMPTY_STRING) {\n        if (originalHexColor !== EMPTY_STRING) {\n          setHexColorInputElementValue(originalHexColor)\n        }\n        setOriginalHexColor(EMPTY_STRING)\n        return\n      }\n      if (hexColor !== MIXED_STRING) {\n        const normalizedHexColor = normalizeUserInputColor(hexColor)\n        const newHexColor =\n          normalizedHexColor === null ? originalHexColor : normalizedHexColor\n        if (newHexColor !== hexColor) {\n          setHexColorInputElementValue(newHexColor)\n        }\n      }\n      setOriginalHexColor(EMPTY_STRING)\n    },\n    [hexColor, originalHexColor, setHexColorInputElementValue]\n  )\n\n  const handleHexColorFocus = useCallback(\n    function (event: JSX.TargetedFocusEvent<HTMLInputElement>): void {\n      setOriginalHexColor(hexColor)\n      event.currentTarget.select()\n    },\n    [hexColor]\n  )\n\n  const handleHexColorInput = useCallback(\n    function (event: JSX.TargetedEvent<HTMLInputElement>) {\n      onHexColorInput(event)\n      const newHexColor = event.currentTarget.value\n      onHexColorValueInput(newHexColor, hexColorName)\n      if (newHexColor === EMPTY_STRING) {\n        onRgbaColorValueInput(null, name)\n        return\n      }\n      const normalizedHexColor = normalizeUserInputColor(newHexColor)\n      if (normalizedHexColor === null) {\n        onRgbaColorValueInput(null, name)\n        return\n      }\n      const rgba = createRgbaColor(normalizedHexColor, opacity)\n      onRgbaColorValueInput(rgba, name)\n    },\n    [\n      hexColorName,\n      onHexColorInput,\n      onHexColorValueInput,\n      onRgbaColorValueInput,\n      name,\n      opacity\n    ]\n  )\n\n  const handleHexColorKeyDown = useCallback(\n    function (event: JSX.TargetedKeyboardEvent<HTMLInputElement>): void {\n      const key = event.key\n      if (key === 'Escape') {\n        if (propagateEscapeKeyDown === false) {\n          event.stopPropagation()\n        }\n        if (revertOnEscapeKeyDown === true) {\n          revertOnEscapeKeyDownRef.current = true\n          setHexColorInputElementValue(originalHexColor)\n          setOriginalHexColor(EMPTY_STRING)\n        }\n        event.currentTarget.blur()\n        return\n      }\n      if (key === 'Enter') {\n        event.currentTarget.blur()\n        return\n      }\n      const element = event.currentTarget\n      if (key === 'ArrowDown' || key === 'ArrowUp') {\n        event.preventDefault()\n        const delta = event.shiftKey === true ? 10 : 1\n        const startingHexColor =\n          hexColor === EMPTY_STRING || hexColor === MIXED_STRING\n            ? key === 'ArrowDown'\n              ? 'FFFFFF'\n              : '000000'\n            : hexColor\n        const newHexColor = updateHexColor(\n          startingHexColor,\n          key === 'ArrowDown' ? -1 * delta : delta\n        )\n        setHexColorInputElementValue(newHexColor)\n        element.select()\n        return\n      }\n      if (event.ctrlKey === true || event.metaKey === true) {\n        return\n      }\n    },\n    [\n      hexColor,\n      originalHexColor,\n      propagateEscapeKeyDown,\n      revertOnEscapeKeyDown,\n      setHexColorInputElementValue\n    ]\n  )\n\n  const handleHexColorMouseUp = useCallback(\n    function (event: JSX.TargetedMouseEvent<HTMLInputElement>): void {\n      if (hexColor !== MIXED_STRING) {\n        return\n      }\n      event.preventDefault()\n    },\n    [hexColor]\n  )\n\n  const handleOpacityInput = useCallback(\n    function (event: JSX.TargetedEvent<HTMLInputElement>) {\n      onOpacityInput(event)\n      const newOpacity = event.currentTarget.value\n      const rgba = createRgbaColor(hexColor, newOpacity)\n      onRgbaColorValueInput(rgba, name)\n    },\n    [hexColor, onOpacityInput, onRgbaColorValueInput, name]\n  )\n\n  const handleOpacityNumericValueInput = useCallback(\n    function (opacity: null | number) {\n      onOpacityNumericValueInput(\n        opacity === null || opacity === MIXED_NUMBER ? opacity : opacity / 100\n      )\n    },\n    [onOpacityNumericValueInput]\n  )\n\n  const validateOpacityOnBlur = useCallback(function (opacity: null | number) {\n    return opacity !== null // Revert the original value if empty\n  }, [])\n\n  const parsedOpacity = parseOpacity(opacity)\n\n  const isHexColorValid = hexColor !== EMPTY_STRING && hexColor !== MIXED_STRING\n  const normalizedHexColor =\n    isHexColorValid === true ? normalizeUserInputColor(hexColor) : 'FFFFFF'\n  const renderedHexColor =\n    normalizedHexColor === null ? originalHexColor : normalizedHexColor\n\n  // Uncomment to debug\n  // console.table([{ hexColor, renderedHexColor, opacity, parsedOpacity }])\n\n  return (\n    <div\n      class={createClassName([\n        styles.textboxColor,\n        typeof variant === 'undefined'\n          ? null\n          : variant === 'border'\n          ? styles.hasBorder\n          : null,\n        disabled === true ? styles.disabled : null\n      ])}\n    >\n      <div class={styles.color}>\n        <div\n          class={styles.colorFill}\n          style={\n            isHexColorValid === true\n              ? { backgroundColor: `#${renderedHexColor}` }\n              : {}\n          }\n        ></div>\n        {parsedOpacity === 1 ? null : (\n          <div\n            class={styles.colorFill}\n            style={\n              isHexColorValid === true\n                ? {\n                    backgroundColor: `#${renderedHexColor}`,\n                    opacity: parsedOpacity\n                  }\n                : {}\n            }\n          ></div>\n        )}\n        <div class={styles.colorBorder} />\n      </div>\n      <input\n        class={styles.hexColorSelector}\n        disabled={disabled === true}\n        onFocus={handleHexColorSelectorFocus}\n        onInput={handleHexColorSelectorInput}\n        onKeyDown={handleHexColorSelectorKeyDown}\n        tabIndex={-1}\n        type=\"color\"\n        value={`#${renderedHexColor}`}\n      />\n      <input\n        {...rest}\n        ref={hexColorInputElementRef}\n        class={createClassName([styles.input, styles.hexColorInput])}\n        disabled={disabled === true}\n        name={hexColorName}\n        onBlur={handleHexColorBlur}\n        onFocus={handleHexColorFocus}\n        onInput={handleHexColorInput}\n        onKeyDown={handleHexColorKeyDown}\n        onMouseUp={handleHexColorMouseUp}\n        placeholder={hexColorPlaceholder}\n        spellcheck={false}\n        tabIndex={disabled === true ? -1 : 0}\n        type=\"text\"\n        value={hexColor === MIXED_STRING ? 'Mixed' : hexColor}\n      />\n      <RawTextboxNumeric\n        class={createClassName([styles.input, styles.opacityInput])}\n        disabled={disabled === true}\n        maximum={100}\n        minimum={0}\n        name={opacityName}\n        onInput={handleOpacityInput}\n        onNumericValueInput={handleOpacityNumericValueInput}\n        onValueInput={onOpacityValueInput}\n        placeholder={opacityPlaceholder}\n        propagateEscapeKeyDown={propagateEscapeKeyDown}\n        revertOnEscapeKeyDown={revertOnEscapeKeyDown}\n        suffix=\"%\"\n        validateOnBlur={validateOpacityOnBlur}\n        value={opacity}\n      />\n      <div class={styles.divider} />\n      <div class={styles.border} />\n      {variant === 'underline' ? <div class={styles.underline} /> : null}\n    </div>\n  )\n}\n\nfunction parseOpacity(opacity: string): number {\n  if (opacity === MIXED_STRING || opacity === EMPTY_STRING) {\n    return 1\n  }\n  return parseInt(opacity, 10) / 100\n}\n"],"names":["hexCharacters","match3or4Hex","match6or8Hex","nonHexChars","validHexSize","hexRgb","hex","options","alphaFromHex","number","red","green","blue","alpha","alphaString","convertHexColorToRgbColor","hexColor","length","b","g","r","NAMED_COLORS","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","convertNamedColorToHexColor","namedColor","toLowerCase","rgbHex","isPercent","component","convertRgbColorToHexColor","rgbColor","Math","round","toUpperCase","isValidHexColor","createRgbaColor","opacity","MIXED_STRING","rgb","a","parseInt","normalizeUserInputColor","string","parsedNamedColor","createHexColor","Array","fill","join","slice","updateHexColor","delta","Error","result","updateValue","value","newValue","min","max","EMPTY_STRING","TextboxColor","disabled","hexColorName","hexColorPlaceholder","name","onHexColorInput","onHexColorValueInput","onOpacityInput","onOpacityNumericValueInput","onOpacityValueInput","onRgbaColorValueInput","opacityName","opacityPlaceholder","propagateEscapeKeyDown","revertOnEscapeKeyDown","variant","rest","hexColorInputElementRef","useRef","revertOnEscapeKeyDownRef","originalHexColor","setOriginalHexColor","useState","setHexColorInputElementValue","useCallback","inputElement","getCurrentFromRef","inputEvent","document","createEvent","initEvent","dispatchEvent","handleHexColorSelectorFocus","event","currentTarget","handleHexColorSelectorInput","handleHexColorSelectorKeyDown","key","stopPropagation","blur","handleHexColorBlur","current","normalizedHexColor","newHexColor","handleHexColorFocus","select","handleHexColorInput","rgba","handleHexColorKeyDown","element","preventDefault","shiftKey","ctrlKey","metaKey","handleHexColorMouseUp","handleOpacityInput","newOpacity","handleOpacityNumericValueInput","MIXED_NUMBER","validateOpacityOnBlur","parsedOpacity","parseOpacity","isHexColorValid","renderedHexColor","_jsxs","class","createClassName","styles","textboxColor","hasBorder","children","color","_jsx","colorFill","style","backgroundColor","colorBorder","hexColorSelector","onFocus","onInput","onKeyDown","tabIndex","type","ref","input","hexColorInput","onBlur","onMouseUp","placeholder","spellcheck","RawTextboxNumeric","opacityInput","maximum","minimum","onNumericValueInput","onValueInput","suffix","validateOnBlur","divider","border","underline"],"mappings":"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","x_google_ignoreList":[0,4]}