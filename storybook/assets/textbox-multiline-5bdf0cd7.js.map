{"version":3,"file":"textbox-multiline-5bdf0cd7.js","sources":["../../src/components/textbox/textbox-multiline/textbox-multiline.tsx"],"sourcesContent":["import { MIXED_STRING } from '@create-figma-plugin/utilities'\nimport { h, JSX, RefObject } from 'preact'\nimport { useCallback, useRef, useState } from 'preact/hooks'\n\nimport { OnValueChange, Props } from '../../../types/types.js'\nimport { createClassName } from '../../../utilities/create-class-name.js'\nimport { getCurrentFromRef } from '../../../utilities/get-current-from-ref.js'\nimport { isKeyCodeCharacterGenerating } from '../private/is-keycode-character-generating.js'\nimport styles from './textbox-multiline.module.css'\n\nconst EMPTY_STRING = ''\n\nexport type TextboxMultilineProps<Name extends string> = {\n  grow?: boolean\n  disabled?: boolean\n  name?: Name\n  onInput?: OmitThisParameter<JSX.GenericEventHandler<HTMLTextAreaElement>>\n  onValueInput?: OnValueChange<string, Name>\n  placeholder?: string\n  propagateEscapeKeyDown?: boolean\n  revertOnEscapeKeyDown?: boolean\n  rows?: number\n  spellCheck?: boolean\n  validateOnBlur?: (value: string) => string | boolean\n  value: string\n  variant?: TextboxMultilineVariant\n}\n\nexport type TextboxMultilineVariant = 'border' | 'underline'\n\nexport function TextboxMultiline<Name extends string>({\n  grow = false,\n  disabled = false,\n  name,\n  onInput = function () {},\n  onValueInput = function () {},\n  placeholder,\n  propagateEscapeKeyDown = true,\n  revertOnEscapeKeyDown = false,\n  rows = 3,\n  spellCheck = false,\n  validateOnBlur,\n  variant,\n  value,\n  ...rest\n}: Props<HTMLTextAreaElement, TextboxMultilineProps<Name>>): JSX.Element {\n  const textAreaElementRef: RefObject<HTMLTextAreaElement> = useRef(null)\n  const revertOnEscapeKeyDownRef: RefObject<boolean> = useRef(false) // Boolean flag to exit early from `handleBlur`\n\n  const [originalValue, setOriginalValue] = useState(EMPTY_STRING) // Value of the textbox when it was initially focused\n\n  const setTextAreaElementValue = useCallback(function (value: string): void {\n    const textAreaElement = getCurrentFromRef(textAreaElementRef)\n    textAreaElement.value = value\n    const inputEvent = document.createEvent('Event')\n    inputEvent.initEvent('input', true, true)\n    textAreaElement.dispatchEvent(inputEvent)\n  }, [])\n\n  const handleBlur = useCallback(\n    function (): void {\n      if (revertOnEscapeKeyDownRef.current === true) {\n        revertOnEscapeKeyDownRef.current = false\n        return\n      }\n      if (typeof validateOnBlur !== 'undefined') {\n        const result = validateOnBlur(value)\n        if (typeof result === 'string') {\n          // Set to the value returned by `validateOnBlur`\n          setTextAreaElementValue(result)\n          setOriginalValue(EMPTY_STRING)\n          return\n        }\n        if (result === false) {\n          // Revert the original value\n          if (value !== originalValue) {\n            setTextAreaElementValue(originalValue)\n          }\n          setOriginalValue(EMPTY_STRING)\n          return\n        }\n      }\n      setOriginalValue(EMPTY_STRING)\n    },\n    [originalValue, setTextAreaElementValue, validateOnBlur, value]\n  )\n\n  const handleFocus = useCallback(\n    function (event: JSX.TargetedFocusEvent<HTMLTextAreaElement>): void {\n      setOriginalValue(value)\n      event.currentTarget.select()\n    },\n    [value]\n  )\n\n  const handleInput = useCallback(\n    function (event: JSX.TargetedEvent<HTMLTextAreaElement>): void {\n      onValueInput(event.currentTarget.value, name)\n      onInput(event)\n    },\n    [name, onInput, onValueInput]\n  )\n\n  const handleKeyDown = useCallback(\n    function (event: JSX.TargetedKeyboardEvent<HTMLTextAreaElement>): void {\n      if (event.key === 'Escape') {\n        if (propagateEscapeKeyDown === false) {\n          event.stopPropagation()\n        }\n        if (revertOnEscapeKeyDown === true) {\n          revertOnEscapeKeyDownRef.current = true\n          setTextAreaElementValue(originalValue)\n          setOriginalValue(EMPTY_STRING)\n        }\n        event.currentTarget.blur()\n        return\n      }\n      if (\n        value === MIXED_STRING &&\n        isKeyCodeCharacterGenerating(event.keyCode) === false\n      ) {\n        // Prevent changing the cursor position with the keyboard if `value` is `MIXED_STRING`\n        event.preventDefault()\n        event.currentTarget.select()\n      }\n    },\n    [\n      originalValue,\n      propagateEscapeKeyDown,\n      revertOnEscapeKeyDown,\n      setTextAreaElementValue,\n      value\n    ]\n  )\n\n  const handleMouseUp = useCallback(\n    function (event: JSX.TargetedMouseEvent<HTMLTextAreaElement>): void {\n      if (value === MIXED_STRING) {\n        // Prevent changing the selection if `value` is `MIXED_STRING`\n        event.preventDefault()\n      }\n    },\n    [value]\n  )\n\n  return (\n    <div\n      class={createClassName([\n        styles.textboxMultiline,\n        typeof variant === 'undefined'\n          ? null\n          : variant === 'border'\n          ? styles.hasBorder\n          : null,\n        grow === true ? styles.grow : null,\n        disabled === true ? styles.disabled : null\n      ])}\n    >\n      {grow === true ? (\n        <div class={styles.ghost}>\n          {value === MIXED_STRING ? 'Mixed' : `${value} `}\n        </div>\n      ) : null}\n      <textarea\n        {...rest}\n        ref={textAreaElementRef}\n        class={styles.textarea}\n        disabled={disabled === true}\n        name={name}\n        onBlur={handleBlur}\n        onFocus={handleFocus}\n        onInput={handleInput}\n        onKeyDown={handleKeyDown}\n        onMouseUp={handleMouseUp}\n        placeholder={placeholder}\n        rows={rows}\n        spellcheck={spellCheck}\n        tabIndex={disabled === true ? -1 : 0}\n        value={value === MIXED_STRING ? 'Mixed' : value}\n      />\n      <div class={styles.border} />\n      {variant === 'underline' ? <div class={styles.underline} /> : null}\n    </div>\n  )\n}\n"],"names":["EMPTY_STRING","TextboxMultiline","grow","disabled","name","onInput","onValueInput","placeholder","propagateEscapeKeyDown","revertOnEscapeKeyDown","rows","spellCheck","validateOnBlur","variant","value","rest","textAreaElementRef","useRef","revertOnEscapeKeyDownRef","originalValue","setOriginalValue","useState","setTextAreaElementValue","useCallback","textAreaElement","getCurrentFromRef","inputEvent","document","createEvent","initEvent","dispatchEvent","handleBlur","current","result","handleFocus","event","currentTarget","select","handleInput","handleKeyDown","key","stopPropagation","blur","MIXED_STRING","isKeyCodeCharacterGenerating","keyCode","preventDefault","handleMouseUp","_jsxs","class","createClassName","styles","textboxMultiline","hasBorder","children","_jsx","ghost","ref","textarea","onBlur","onFocus","onKeyDown","onMouseUp","spellcheck","tabIndex","border","underline"],"mappings":"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"}