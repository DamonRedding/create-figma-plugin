{"version":3,"file":"textbox-63b038aa.js","sources":["../../src/components/textbox/textbox/private/raw-textbox.tsx","../../src/components/textbox/textbox/textbox.tsx"],"sourcesContent":["import { MIXED_STRING } from '@create-figma-plugin/utilities'\nimport { h, JSX, RefObject } from 'preact'\nimport { useCallback, useRef, useState } from 'preact/hooks'\n\nimport { OnValueChange, Props } from '../../../../types/types.js'\nimport { getCurrentFromRef } from '../../../../utilities/get-current-from-ref.js'\nimport { isKeyCodeCharacterGenerating } from '../../private/is-keycode-character-generating.js'\n\nconst EMPTY_STRING = ''\n\nexport type RawTextboxProps<Name extends string> = {\n  disabled?: boolean\n  name?: Name\n  onInput?: OmitThisParameter<JSX.GenericEventHandler<HTMLInputElement>>\n  onValueInput?: OnValueChange<string, Name>\n  password?: boolean\n  placeholder?: string\n  propagateEscapeKeyDown?: boolean\n  revertOnEscapeKeyDown?: boolean\n  spellCheck?: boolean\n  validateOnBlur?: (value: string) => string | boolean\n  value: string\n}\n\nexport function RawTextbox<Name extends string>({\n  disabled = false,\n  name,\n  onInput = function () {},\n  onValueInput = function () {},\n  password = false,\n  placeholder,\n  propagateEscapeKeyDown = true,\n  revertOnEscapeKeyDown = false,\n  spellCheck = false,\n  validateOnBlur,\n  value,\n  ...rest\n}: Props<HTMLInputElement, RawTextboxProps<Name>>): JSX.Element {\n  const inputElementRef: RefObject<HTMLInputElement> = useRef(null)\n  const revertOnEscapeKeyDownRef: RefObject<boolean> = useRef(false) // Boolean flag to exit early from `handleBlur`\n\n  const [originalValue, setOriginalValue] = useState(EMPTY_STRING) // Value of the textbox when it was initially focused\n\n  const setInputElementValue = useCallback(function (value: string): void {\n    const inputElement = getCurrentFromRef(inputElementRef)\n    inputElement.value = value\n    const inputEvent = document.createEvent('Event')\n    inputEvent.initEvent('input', true, true)\n    inputElement.dispatchEvent(inputEvent)\n  }, [])\n\n  const handleBlur = useCallback(\n    function (): void {\n      if (revertOnEscapeKeyDownRef.current === true) {\n        revertOnEscapeKeyDownRef.current = false\n        return\n      }\n      if (typeof validateOnBlur !== 'undefined') {\n        const result = validateOnBlur(value)\n        if (typeof result === 'string') {\n          // Set to the value returned by `validateOnBlur`\n          setInputElementValue(result)\n          setOriginalValue(EMPTY_STRING)\n          return\n        }\n        if (result === false) {\n          // Revert the original value\n          if (value !== originalValue) {\n            setInputElementValue(originalValue)\n          }\n          setOriginalValue(EMPTY_STRING)\n          return\n        }\n      }\n      setOriginalValue(EMPTY_STRING)\n    },\n    [originalValue, setInputElementValue, validateOnBlur, value]\n  )\n\n  const handleFocus = useCallback(\n    function (event: JSX.TargetedFocusEvent<HTMLInputElement>): void {\n      setOriginalValue(value)\n      event.currentTarget.select()\n    },\n    [value]\n  )\n\n  const handleInput = useCallback(\n    function (event: JSX.TargetedEvent<HTMLInputElement>): void {\n      onValueInput(event.currentTarget.value, name)\n      onInput(event)\n    },\n    [name, onInput, onValueInput]\n  )\n\n  const handleKeyDown = useCallback(\n    function (event: JSX.TargetedKeyboardEvent<HTMLInputElement>): void {\n      const key = event.key\n      if (key === 'Escape') {\n        if (propagateEscapeKeyDown === false) {\n          event.stopPropagation()\n        }\n        if (revertOnEscapeKeyDown === true) {\n          revertOnEscapeKeyDownRef.current = true\n          setInputElementValue(originalValue)\n          setOriginalValue(EMPTY_STRING)\n        }\n        event.currentTarget.blur()\n        return\n      }\n      if (key === 'Enter') {\n        event.currentTarget.blur()\n        return\n      }\n      if (\n        value === MIXED_STRING &&\n        isKeyCodeCharacterGenerating(event.keyCode) === false\n      ) {\n        // Prevent changing the cursor position with the keyboard if `value` is `MIXED_STRING`\n        event.preventDefault()\n        event.currentTarget.select()\n      }\n    },\n    [\n      originalValue,\n      propagateEscapeKeyDown,\n      revertOnEscapeKeyDown,\n      setInputElementValue,\n      value\n    ]\n  )\n\n  const handleMouseUp = useCallback(\n    function (event: JSX.TargetedMouseEvent<HTMLInputElement>): void {\n      if (value === MIXED_STRING) {\n        // Prevent changing the selection if `value` is `MIXED_STRING`\n        event.preventDefault()\n      }\n    },\n    [value]\n  )\n\n  return (\n    <input\n      {...rest}\n      ref={inputElementRef}\n      disabled={disabled === true}\n      name={name}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onInput={handleInput}\n      onKeyDown={handleKeyDown}\n      onMouseUp={handleMouseUp}\n      placeholder={placeholder}\n      spellcheck={spellCheck}\n      tabIndex={disabled === true ? -1 : 0}\n      type={password === true ? 'password' : 'text'}\n      value={value === MIXED_STRING ? 'Mixed' : value}\n    />\n  )\n}\n","import { ComponentChildren, h, JSX } from 'preact'\n\nimport { Props } from '../../../types/types.js'\nimport { createClassName } from '../../../utilities/create-class-name.js'\nimport { RawTextbox, RawTextboxProps } from './private/raw-textbox.js'\nimport styles from './textbox.module.css'\n\nexport type TextboxProps<Name extends string> = RawTextboxProps<Name> & {\n  icon?: ComponentChildren\n  variant?: TextboxVariant\n}\n\nexport type TextboxVariant = 'border' | 'underline'\n\nexport function Textbox<Name extends string>({\n  icon,\n  variant,\n  ...rest\n}: Props<HTMLInputElement, TextboxProps<Name>>): JSX.Element {\n  if (typeof icon === 'string' && icon.length !== 1) {\n    throw new Error(`String \\`icon\\` must be a single character: ${icon}`)\n  }\n\n  return (\n    <div\n      class={createClassName([\n        styles.textbox,\n        typeof variant === 'undefined'\n          ? null\n          : variant === 'border'\n          ? styles.hasBorder\n          : null,\n        typeof icon === 'undefined' ? null : styles.hasIcon,\n        rest.disabled === true ? styles.disabled : null\n      ])}\n    >\n      <RawTextbox {...rest} class={styles.input} />\n      {typeof icon === 'undefined' ? null : (\n        <div class={styles.icon}>{icon}</div>\n      )}\n      <div class={styles.border} />\n      {variant === 'underline' ? <div class={styles.underline} /> : null}\n    </div>\n  )\n}\n"],"names":["EMPTY_STRING","RawTextbox","disabled","name","onInput","onValueInput","password","placeholder","propagateEscapeKeyDown","revertOnEscapeKeyDown","spellCheck","validateOnBlur","value","rest","inputElementRef","useRef","revertOnEscapeKeyDownRef","originalValue","setOriginalValue","useState","setInputElementValue","useCallback","inputElement","getCurrentFromRef","inputEvent","document","createEvent","initEvent","dispatchEvent","handleBlur","current","result","handleFocus","event","currentTarget","select","handleInput","handleKeyDown","key","stopPropagation","blur","MIXED_STRING","isKeyCodeCharacterGenerating","keyCode","preventDefault","handleMouseUp","_jsx","ref","onBlur","onFocus","onKeyDown","onMouseUp","spellcheck","tabIndex","type","Textbox","icon","variant","length","Error","_jsxs","class","createClassName","styles","textbox","hasBorder","hasIcon","children","input","border","underline"],"mappings":"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"}