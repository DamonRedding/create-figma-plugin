{"version":3,"file":"textbox-multiline-5ebc1828.js","sources":["../../src/components/textbox/textbox-multiline/textbox-multiline.tsx"],"sourcesContent":["import { MIXED_STRING } from '@create-figma-plugin/utilities'\nimport { h, RefObject } from 'preact'\nimport { useCallback, useRef, useState } from 'preact/hooks'\n\nimport { Event, EventHandler } from '../../../types/event-handler.js'\nimport { FocusableComponentProps } from '../../../types/focusable-component-props.js'\nimport { createClassName } from '../../../utilities/create-class-name.js'\nimport { createComponent } from '../../../utilities/create-component.js'\nimport { getCurrentFromRef } from '../../../utilities/get-current-from-ref.js'\nimport { noop } from '../../../utilities/no-op.js'\nimport { isKeyCodeCharacterGenerating } from '../private/is-keycode-character-generating.js'\nimport styles from './textbox-multiline.module.css'\n\nconst EMPTY_STRING = ''\n\nexport interface TextboxMultilineProps\n  extends FocusableComponentProps<HTMLTextAreaElement> {\n  disabled?: boolean\n  grow?: boolean\n  onBlur?: EventHandler.onBlur<HTMLTextAreaElement>\n  onFocus?: EventHandler.onFocus<HTMLTextAreaElement>\n  onInput?: EventHandler.onInput<HTMLTextAreaElement>\n  onMouseDown?: EventHandler.onMouseDown<HTMLTextAreaElement>\n  onValueInput?: EventHandler.onValueChange<string>\n  placeholder?: string\n  revertOnEscapeKeyDown?: boolean\n  rows?: number\n  spellCheck?: boolean\n  validateOnBlur?: (value: string) => string | boolean\n  value: string\n  variant?: TextboxMultilineVariant\n}\n\nexport type TextboxMultilineVariant = 'border' | 'underline'\n\nexport const TextboxMultiline = createComponent<\n  HTMLTextAreaElement,\n  TextboxMultilineProps\n>(function (\n  {\n    grow = false,\n    disabled = false,\n    onBlur = noop,\n    onFocus = noop,\n    onInput = noop,\n    onKeyDown = noop,\n    onValueInput = noop,\n    onMouseDown = noop,\n    placeholder,\n    propagateEscapeKeyDown = true,\n    revertOnEscapeKeyDown = false,\n    rows = 3,\n    spellCheck = false,\n    validateOnBlur,\n    variant,\n    value,\n    ...rest\n  },\n  ref\n) {\n  const textAreaElementRef: RefObject<HTMLTextAreaElement> = useRef(null)\n\n  const [originalValue, setOriginalValue] = useState(EMPTY_STRING) // Value of the textbox when it was initially focused\n\n  const setTextAreaElementValue = useCallback(function (value: string) {\n    const textAreaElement = getCurrentFromRef(textAreaElementRef)\n    textAreaElement.value = value\n    const inputEvent = new window.Event('input', {\n      bubbles: true,\n      cancelable: true\n    })\n    textAreaElement.dispatchEvent(inputEvent)\n  }, [])\n\n  const handleBlur = useCallback(\n    function (event: Event.onBlur<HTMLTextAreaElement>) {\n      onBlur(event)\n      if (typeof validateOnBlur !== 'undefined') {\n        const result = validateOnBlur(value)\n        if (typeof result === 'string') {\n          // Set to the value returned by `validateOnBlur`\n          setTextAreaElementValue(result)\n          setOriginalValue(EMPTY_STRING)\n          return\n        }\n        if (result === false) {\n          // Revert to the original value\n          if (value !== originalValue) {\n            setTextAreaElementValue(originalValue)\n          }\n          setOriginalValue(EMPTY_STRING)\n          return\n        }\n      }\n      setOriginalValue(EMPTY_STRING)\n    },\n    [onBlur, originalValue, setTextAreaElementValue, validateOnBlur, value]\n  )\n\n  const handleFocus = useCallback(\n    function (event: Event.onFocus<HTMLTextAreaElement>) {\n      onFocus(event)\n      setOriginalValue(value)\n      event.currentTarget.select()\n    },\n    [onFocus, value]\n  )\n\n  const handleInput = useCallback(\n    function (event: Event.onInput<HTMLTextAreaElement>) {\n      onInput(event)\n      const newValue = event.currentTarget.value\n      onValueInput(newValue)\n    },\n    [onInput, onValueInput]\n  )\n\n  const handleKeyDown = useCallback(\n    function (event: Event.onKeyDown<HTMLTextAreaElement>) {\n      onKeyDown(event)\n      if (event.key === 'Escape') {\n        if (revertOnEscapeKeyDown === true) {\n          setTextAreaElementValue(originalValue)\n          setOriginalValue(EMPTY_STRING)\n        }\n        if (propagateEscapeKeyDown === false) {\n          event.stopPropagation()\n        }\n        event.currentTarget.blur()\n        return\n      }\n      if (\n        value === MIXED_STRING &&\n        isKeyCodeCharacterGenerating(event.keyCode) === false\n      ) {\n        // Prevent changing the cursor position with the keyboard if `value` is `MIXED_STRING`\n        event.preventDefault()\n        event.currentTarget.select()\n      }\n    },\n    [\n      onKeyDown,\n      originalValue,\n      propagateEscapeKeyDown,\n      revertOnEscapeKeyDown,\n      setTextAreaElementValue,\n      value\n    ]\n  )\n\n  const handleMouseDown = useCallback(\n    function (event: Event.onMouseUp<HTMLTextAreaElement>) {\n      onMouseDown(event)\n      if (value === MIXED_STRING) {\n        // Prevent changing the selection if `value` is `MIXED_STRING`\n        event.preventDefault()\n        event.currentTarget.select()\n      }\n    },\n    [onMouseDown, value]\n  )\n\n  const refCallback = useCallback(\n    function (textAreaElement: null | HTMLTextAreaElement) {\n      textAreaElementRef.current = textAreaElement\n      if (ref === null) {\n        return\n      }\n      if (typeof ref === 'function') {\n        ref(textAreaElement)\n        return\n      }\n      ref.current = textAreaElement\n    },\n    [ref]\n  )\n\n  return (\n    <div\n      class={createClassName([\n        styles.textboxMultiline,\n        typeof variant === 'undefined'\n          ? null\n          : variant === 'border'\n          ? styles.hasBorder\n          : null,\n        grow === true ? styles.grow : null,\n        disabled === true ? styles.disabled : null\n      ])}\n    >\n      {grow === true ? (\n        <div class={styles.ghost}>\n          {value === MIXED_STRING ? 'Mixed' : `${value} `}\n        </div>\n      ) : null}\n      <textarea\n        {...rest}\n        ref={refCallback}\n        class={styles.textarea}\n        disabled={disabled === true}\n        onBlur={handleBlur}\n        onFocus={handleFocus}\n        onInput={handleInput}\n        onKeyDown={handleKeyDown}\n        onMouseDown={handleMouseDown}\n        placeholder={placeholder}\n        rows={rows}\n        spellcheck={spellCheck}\n        tabIndex={0}\n        value={value === MIXED_STRING ? 'Mixed' : value}\n      />\n      <div class={styles.border} />\n      {variant === 'underline' ? <div class={styles.underline} /> : null}\n    </div>\n  )\n})\n"],"names":["EMPTY_STRING","TextboxMultiline","createComponent","grow","disabled","onBlur","noop","onFocus","onInput","onKeyDown","onValueInput","onMouseDown","placeholder","propagateEscapeKeyDown","revertOnEscapeKeyDown","rows","spellCheck","validateOnBlur","variant","value","rest","ref","textAreaElementRef","useRef","originalValue","setOriginalValue","useState","setTextAreaElementValue","useCallback","textAreaElement","getCurrentFromRef","inputEvent","window","Event","bubbles","cancelable","dispatchEvent","handleBlur","event","result","handleFocus","currentTarget","select","handleInput","newValue","handleKeyDown","key","stopPropagation","blur","MIXED_STRING","isKeyCodeCharacterGenerating","keyCode","preventDefault","handleMouseDown","refCallback","current","_jsxs","class","createClassName","styles","textboxMultiline","hasBorder","children","_jsx","ghost","textarea","spellcheck","tabIndex","border","underline"],"mappings":"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"}